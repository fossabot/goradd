package control

import (
	"context"
	"bytes"
	grhtml "github.com/spekary/goradd/html"
	"github.com/spekary/goradd/page"
	"html"
)

// The FormGroupTmpl function is a wrapper template that draws form objects using bootstrap styling.
// To use it, call the .With() function on your control and pass it the result of the NewFormGroupTmpl() function
func FormGroupTmpl(ctx context.Context, wrapper *DivWrapperType, ctrl page.ControlI, h string, buf *bytes.Buffer) {
    var hasInnerDivAttributes bool = wrapper.HasInnerDivAttributes()
    var hasInstructions bool = (ctrl.Instructions()!= "")

    if wrapper.useTooltips {
        // bootstrap requires that parent of a tooltipped object has position relative
        ctrl.WrapperAttributes().SetStyle("position", "relative")
    }
{{
<div id="{{= ctrl.ID() }}_ctl" {{= ctrl.WrapperAttributes().String() }} >
{{if ctrl.Label() != "" }}
    {{if ctrl.TextIsLabel() }}
   <div id="{{= ctrl.ID() }}_lbl" {{if wrapper.HasLabelAttributes() }}{{= wrapper.LabelAttributes().String() }}{{if}}>{{!= ctrl.Label() }}</div>
    {{else}}
  <label id="{{= ctrl.ID() }}_lbl" {{if ctrl.HasFor() }} for="{{= ctrl.ID() }}"{{if}} {{if wrapper.HasLabelAttributes() }}{{= wrapper.LabelAttributes().String() }}{{if}}>{{!= ctrl.Label() }}</label>
    {{if}}
{{else}}
    {{if ctrl.HasAttribute("placeholder")}}
  <label id="{{= ctrl.ID() }}_lbl" {{if ctrl.HasFor() }} for="{{= ctrl.ID() }}"{{if}} class="sr-only">{{!= ctrl.Attribute("placeholder") }}</label>
    {{if}}
{{if}}

{{if hasInnerDivAttributes }}<div {{= wrapper.InnerDivAttributes().String() }}>{{if}}
{{= grhtml.Indent(h) }}
{{if hasInnerDivAttributes }}</div>{{if}}

{{g
    switch ctrl.ValidationState() {
    case page.Valid:
        msg := ctrl.ValidationMessage()
        if msg == "" {
            msg = "&nbsp";
        } else {
            msg = html.EscapeString(msg)
        }
      {{ <div id="{{= ctrl.ID() }}_err" class="{{if wrapper.useTooltips}}valid-tooltip{{else}}valid-feedback{{if}}">{{= msg }}</div> }}
    case page.Invalid:
         msg := ctrl.ValidationMessage()
         if msg == "" {
             msg = "&nbsp";
         } else {
            msg = html.EscapeString(msg)
         }
     {{ <div id="{{= ctrl.ID() }}_err" class="{{if wrapper.useTooltips}}invalid-tooltip{{else}}invalid-feedback{{if}}">{{= msg }}</div> }}
    default:
        // Either draw instructions, or draw an empty space so that if a validation error is shown, the layout will not shift
        {{ <small id="{{= ctrl.ID() }}_inst" class="form-text" >{{if (!hasInstructions && !wrapper.useTooltips) }}&nbsp;{{else}}{{!= ctrl.Instructions() }}{{if}}</small> }}
    }
}}
</div>
}}

    return

}
