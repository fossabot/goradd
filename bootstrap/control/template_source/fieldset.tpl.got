package control

import (
	"context"
	"bytes"
	grhtml "github.com/spekary/goradd/html"
	"github.com/spekary/goradd/page"
	"html"
)

// FieldsetTmpl is the template for special situations where you want to wrap a group of controls with a fieldset
// This is useful for groups of related controls, like a group of radio buttons.
// If you want the entire group to be a row, give the wrapper a "row" class. This will automatically pull out the
// row class and add an independent div wrapper with a row class, which is a special requirement for this kind of object.
func FieldsetTmpl(ctx context.Context, wrapper *FieldsetWrapper, ctrl page.ControlI, h string, buf *bytes.Buffer) {
    var hasInstructions bool = (ctrl.Instructions()!= "")
    var hasRow bool

    ctrl.WrapperAttributes().AddClass("form-group")
    if wrapper.useTooltips {
        // bootstrap requires that parent of a tooltipped object has position relative
        ctrl.WrapperAttributes().SetStyle("position", "relative")
    }
    if ctrl.WrapperAttributes().HasClass("row") {
        ctrl.WrapperAttributes().RemoveClass("row")
        hasRow = true
    }
    wrapper.LabelAttributes().AddClass("col-form-label").
        AddClass("pt-0") // helps with alignment
{{
<fieldset id="{{= ctrl.ID() }}_ctl" {{= ctrl.WrapperAttributes().String() }} >
{{if hasRow}}<div class="row">{{if}}
{{if ctrl.Label() != "" }}
  <legend id="{{= ctrl.ID() }}_lbl" {{= wrapper.LabelAttributes().String() }}>{{!= ctrl.Label() }}</legend>
{{if}}

{{= grhtml.Indent(h) }}

{{g
    switch ctrl.ValidationState() {
    case page.Valid:
        msg := ctrl.ValidationMessage()
        if msg == "" {
            msg = "&nbsp";
        } else {
            msg = html.EscapeString(msg)
        }
      {{ <div id="{{= ctrl.ID() }}_err" class="{{if wrapper.useTooltips}}valid-tooltip{{else}}valid-feedback{{if}}">{{= msg }}</div> }}
    case page.Invalid:
         msg := ctrl.ValidationMessage()
         if msg == "" {
             msg = "&nbsp";
         } else {
            msg = html.EscapeString(msg)
         }
     {{ <div id="{{= ctrl.ID() }}_err" class="{{if wrapper.useTooltips}}invalid-tooltip{{else}}invalid-feedback{{if}}">{{= msg }}</div> }}
    default:
        // Either draw instructions, or draw an empty space so that if a validation error is shown, the layout will not shift
        {{ <small id="{{= ctrl.ID() }}_inst" class="form-text text-muted" >{{if (!hasInstructions && !wrapper.useTooltips) }}&nbsp;{{else}}{{!= ctrl.Instructions() }}{{if}}</small> }}
    }
}}
{{if hasRow}}</div>{{if}}

</fieldset>
}}

    return

}
