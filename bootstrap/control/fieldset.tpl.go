//** This file was code generated by got. ***

package control

import (
	"bytes"
	"context"
	"html"

	grhtml "github.com/spekary/goradd/html"
	"github.com/spekary/goradd/page"
)

// FieldsetTmpl is the template for special situations where you want to wrap a group of controls with a fieldset
// This is useful for groups of related controls, like a group of radio buttons.
// If you want the entire group to be a row, give the wrapper a "row" class. This will automatically pull out the
// row class and add an independent div wrapper with a row class, which is a special requirement for this kind of object.
func FieldsetTmpl(ctx context.Context, wrapper *FieldsetWrapper, ctrl page.ControlI, h string, buf *bytes.Buffer) {
	var hasInstructions bool = (ctrl.Instructions() != "")
	var hasRow bool

	ctrl.WrapperAttributes().AddClass("form-group")
	if wrapper.useTooltips {
		// bootstrap requires that parent of a tooltipped object has position relative
		ctrl.WrapperAttributes().SetStyle("position", "relative")
	}
	if ctrl.WrapperAttributes().HasClass("row") {
		ctrl.WrapperAttributes().RemoveClass("row")
		hasRow = true
	}
	wrapper.LabelAttributes().AddClass("col-form-label").
		AddClass("pt-0") // helps with alignment

	buf.WriteString(`<fieldset id="`)

	buf.WriteString(ctrl.ID())

	buf.WriteString(`_ctl" `)

	buf.WriteString(ctrl.WrapperAttributes().String())

	buf.WriteString(` >
`)
	if hasRow {
		buf.WriteString(`<div class="row">`)
	}
	if ctrl.Label() != "" {
		buf.WriteString(`  <legend id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_lbl" `)

		buf.WriteString(wrapper.LabelAttributes().String())

		buf.WriteString(`>`)

		buf.WriteString(html.EscapeString(ctrl.Label()))

		buf.WriteString(`</legend>
`)
	}

	buf.WriteString(`
`)

	buf.WriteString(grhtml.Indent(h))

	buf.WriteString(`

`)
	switch ctrl.ValidationState() {
	case page.Valid:
		msg := ctrl.ValidationMessage()
		if msg == "" {
			msg = "&nbsp"
		} else {
			msg = html.EscapeString(msg)
		}

		buf.WriteString(`<div id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_err" class="`)
		if wrapper.useTooltips {
			buf.WriteString(`valid-tooltip`)
		} else {

			buf.WriteString(`valid-feedback`)
		}

		buf.WriteString(`">`)

		buf.WriteString(msg)

		buf.WriteString(`</div>`)

	case page.Invalid:
		msg := ctrl.ValidationMessage()
		if msg == "" {
			msg = "&nbsp"
		} else {
			msg = html.EscapeString(msg)
		}

		buf.WriteString(`<div id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_err" class="`)
		if wrapper.useTooltips {
			buf.WriteString(`invalid-tooltip`)
		} else {

			buf.WriteString(`invalid-feedback`)
		}

		buf.WriteString(`">`)

		buf.WriteString(msg)

		buf.WriteString(`</div>`)

	default:
		// Either draw instructions, or draw an empty space so that if a validation error is shown, the layout will not shift

		buf.WriteString(`<small id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_inst" class="form-text text-muted" >`)
		if !hasInstructions && !wrapper.useTooltips {
			buf.WriteString(`&nbsp;`)
		} else {

			buf.WriteString(html.EscapeString(ctrl.Instructions()))
		}

		buf.WriteString(`</small>`)

	}
	if hasRow {
		buf.WriteString(`</div>`)
	}

	buf.WriteString(`
</fieldset>
`)

	return

}
