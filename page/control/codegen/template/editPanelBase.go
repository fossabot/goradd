//** This file was code generated by got. ***

package template

import (
	"bytes"
	"fmt"
	"goradd/config"

	"github.com/knq/snaker"
	"github.com/spekary/goradd/codegen/generator"
	"github.com/spekary/goradd/orm/db"
)

func init() {
	t := EditPanelBaseTemplate{
		generator.Template{
			Overwrite: true,
			TargetDir: config.LocalDir + "/gen",
		},
	}
	generator.AddTableTemplate(&t)
}

type EditPanelBaseTemplate struct {
	generator.Template
}

func (n *EditPanelBaseTemplate) FileName(key string, t generator.TableType) string {
	return n.TargetDir + "/" + key + "/panel/" + t.GoName + "EditBase.go"
}

func (n *EditPanelBaseTemplate) GenerateTable(codegen generator.Codegen, dd *db.DatabaseDescription, t generator.TableType, buf *bytes.Buffer) {
	//editPanelBase.tmpl

	// The master template for the EditPanelBase classes

	var panelName = t.GoName + "EditBase"

	buf.WriteString(`
package panel

import(
	"github.com/spekary/goradd/page"
	"github.com/spekary/goradd/page/control"
	"context"
	"goradd/gen/`)

	buf.WriteString(fmt.Sprintf("%v", dd.DbKey))

	buf.WriteString(`/connector"
	"goradd/gen/`)

	buf.WriteString(fmt.Sprintf("%v", dd.DbKey))

	buf.WriteString(`/model"
`)
	for _, imp := range t.Imports {
		if imp.Alias == "" {
			buf.WriteString(`    "`)

			buf.WriteString(imp.Path)

			buf.WriteString(`"
`)
		} else {

			buf.WriteString(`    `)

			buf.WriteString(imp.Alias)

			buf.WriteString(` "`)

			buf.WriteString(imp.Path)

			buf.WriteString(`"
`)
		}
	}

	buf.WriteString(`
)

const (
)

`)

	buf.WriteString(`// struct.tmpl
`)

	buf.WriteString(`
type `)

	buf.WriteString(panelName)

	buf.WriteString(` struct {
	control.Panel
	Connector *connector.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`
	`)

	buf.WriteString(t.GoName)

	buf.WriteString(` *model.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`
`)
	for _, col := range t.Columns {
		if col.Generator != nil {
			buf.WriteString(`    `)

			buf.WriteString(col.ControlName)

			buf.WriteString(` *`)

			buf.WriteString(col.Import.Namespace)

			buf.WriteString(`.`)

			buf.WriteString(col.ControlType)

			buf.WriteString(`
`)
		}
	}

	buf.WriteString(`}

func New`)

	buf.WriteString(panelName)

	buf.WriteString(`(parent page.ControlI, id string) *`)

	buf.WriteString(panelName)

	buf.WriteString(` {
    p := new(`)

	buf.WriteString(panelName)

	buf.WriteString(`)
	p.Init(p, parent, id)
	return p
}

func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Init(self page.ControlI, parent page.ControlI, id string) {
	p.Panel.Init(self, parent, id)
	p.Connector = connector.New`)

	buf.WriteString(t.GoName)

	buf.WriteString(`Connector(p)
}

`)

	buf.WriteString(`

`)

	buf.WriteString(`// createControls.tmpl
`)

	buf.WriteString(`
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) CreateControls() {
`)
	for _, col := range t.Columns {
		if col.Generator != nil {
			controlName := col.ControlName
			controlID := snaker.CamelToSnake(controlName)

			buf.WriteString(`    p.`)

			buf.WriteString(controlName)

			buf.WriteString(` = p.Connector.New`)

			buf.WriteString(controlName)

			buf.WriteString(`("`)

			buf.WriteString(controlID)

			buf.WriteString(`")
`)
		}
	}

	buf.WriteString(`}

`)

	buf.WriteString(`


`)

	buf.WriteString(`

func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Load(ctx context.Context, pk string) error {
	if pk == "" {
		p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(` = model.New`)

	buf.WriteString(t.GoName)

	buf.WriteString(`()
	} else {
		p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(` = model.Load`)

	buf.WriteString(t.GoName)

	buf.WriteString(`(ctx, pk)

		if p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(` == nil {
			d := control.Alert(p.ParentForm(), p.ParentForm().T("The record was not found. Perhaps it was deleted by someone else?"), "OK")
			d.SetTitle(p.ParentForm().T("Error"))
			return page.NewFrameworkError(page.FrameworkErrRecordNotFound)
		}
	}

	p.Connector.Load(p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`)

	return nil
}

func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Validate(ctx context.Context) bool {
	isValid := p.Panel.Validate(ctx)
    return isValid
}

// Refresh loads the controls with data from the cached `)

	buf.WriteString(panelName)

	buf.WriteString(` object.
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Refresh() {
    p.Connector.Refresh()
}

// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Reload(ctx context.Context) {
    p.Load(ctx, p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`.PrimaryKey())
}

// Save writes out the data that is currently in the controls
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Save(ctx context.Context) {
    p.Connector.Save(ctx)
}

// Delete deletes the object currently being edited
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Delete(ctx context.Context) {
    p.Connector.Delete(ctx)
}


`)

}

func (n *EditPanelBaseTemplate) Overwrite() bool {
	return n.Template.Overwrite
}
