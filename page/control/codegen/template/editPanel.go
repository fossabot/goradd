//** This file was code generated by got. ***

package template

import (
	"bytes"
	"goradd/config"

	"github.com/spekary/goradd/codegen/generator"
	"github.com/spekary/goradd/orm/db"
)

func init() {
	t := EditPanelTemplate{
		generator.Template{
			Overwrite: false,
			TargetDir: config.LocalDir + "/gen",
		},
	}
	generator.AddTableTemplate(&t)
}

type EditPanelTemplate struct {
	generator.Template
}

func (n *EditPanelTemplate) FileName(key string, t generator.TableType) string {
	return n.TargetDir + "/" + key + "/panel/" + t.GoName + "Edit.go"
}

func (n *EditPanelTemplate) GenerateTable(codegen generator.Codegen, dd *db.DatabaseDescription, t generator.TableType, buf *bytes.Buffer) {
	//edit.tmpl

	// The master template for the EditPanel classes

	var panelName = t.GoName + "Edit"

	buf.WriteString(`
package panel

import(
	"github.com/spekary/goradd/page"
	"github.com/spekary/goradd/page/control"
	"context"
	"goradd/gen/goradd/connector"
	"goradd/gen/goradd/model"
)

type `)

	buf.WriteString(panelName)

	buf.WriteString(` struct {
	`)

	buf.WriteString(panelName)

	buf.WriteString(`Base
}

func New`)

	buf.WriteString(panelName)

	buf.WriteString(`Panel(parent page.ControlI, id string) *`)

	buf.WriteString(panelName)

	buf.WriteString(` {
    p := new(`)

	buf.WriteString(panelName)

	buf.WriteString(`)
	p.Init(p, parent, id)
	return p
}

func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Init(self page.ControlI, parent page.ControlI, id string) {
	p.`)

	buf.WriteString(panelName)

	buf.WriteString(`Base.Init(self, parent, id)
	p.CreateControls()
}

/* Override and call base class, or completely replace as you need
// CreateControls calls the connector to create specific controls as needed, and possibly creates
// additional controls that are not managed by the connector
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) CreateControls() {
    p.`)

	buf.WriteString(panelName)

	buf.WriteString(`Base.CreateControls()
}
*/

/* Override and call base class, or completely replace as you need
// Load loads up the edit panel with data from the database. pk is the primary key of a model.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`
// database record
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Load(ctx context.Context, pk string) error {
}
*/

/* Override and call base class, or completely replace as you need
// Validate validates the controls in the panel
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Validate(ctx context.Context) bool {
	isValid := d.`)

	buf.WriteString(panelName)

	buf.WriteString(`Base.Validate(ctx)

	// add other validations here
    return isValid
}
*/

/* Override and call base class, or completely replace as you need
// Refresh loads the controls with data from the cached model.`)

	buf.WriteString(t.GoName)

	buf.WriteString(` object.
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Refresh() {
    p.Connector.Refresh()
}
*/

/* Override and call base class, or completely replace as you need
// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Reload(ctx context.Context) {
    p.Load(p.`)

	buf.WriteString(t.GoName)

	buf.WriteString(`.PrimaryKey())
}
*/

/* Override and call base class, or completely replace as you need
// Save writes out the data that is currently in the controls
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Save(ctx context.Context) {
    p.Connector.Save(ctx)
}
*/

/* Override and call base class, or completely replace as you need
// Delete deletes the object currently being edited
func (p *`)

	buf.WriteString(panelName)

	buf.WriteString(`) Delete(ctx context.Context) {
    p.Connector.Delete(ctx)
}
*/

`)

}

func (n *EditPanelTemplate) Overwrite() bool {
	return n.Template.Overwrite
}
