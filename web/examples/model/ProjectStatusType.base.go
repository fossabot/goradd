package model

// Code generated by goradd. DO NOT EDIT.

import (
	//"log"
	//"github.com/goradd/goradd/pkg/orm/query"
	"strconv"
)

const (
	ProjectStatusTypeOpen ProjectStatusType = 1

	ProjectStatusTypeCancelled ProjectStatusType = 2

	ProjectStatusTypeCompleted ProjectStatusType = 3
)

const ProjectStatusTypeMaxValue = 3

type ProjectStatusType uint

// String returns the name value of the type and satisfies the fmt.Stringer interface
func (p ProjectStatusType) String() string {
	switch p {
	case 0:
		return ""
	case 1:
		return "Open"
	case 2:
		return "Cancelled"
	case 3:
		return "Completed"
	default:
		panic("Index out of range")
	}
	return "" // prevent warning
}

// ID returns a string representation of the id and satisfies the IDer interface
func (p ProjectStatusType) ID() string {
	return strconv.Itoa(int(p))
}

func ProjectStatusTypes() (values []ProjectStatusType) {
	values = append(values, 1)
	values = append(values, 2)
	values = append(values, 3)
	return
}

func (p ProjectStatusType) Description() string {
	switch p {
	case 0:
		return ""
	case 1:
		return "The project is currently active"
	case 2:
		return "The project has been canned"
	case 3:
		return "The project has been completed successfully"
	default:
		panic("Index out of range")
	}
	return "" // prevent warning
}
func (p ProjectStatusType) Guidelines() string {
	switch p {
	case 0:
		return ""
	case 1:
		return "All projects that we are working on should be in this state"
	case 2:
		return ""
	case 3:
		return "Celebrate successes!"
	default:
		panic("Index out of range")
	}
	return "" // prevent warning
}
func (p ProjectStatusType) IsActive() bool {
	switch p {
	case 0:
		return false
	case 1:
		return true
	case 2:
		return true
	case 3:
		return true
	default:
		panic("Index out of range")
	}
	return false // prevent warning
}
func ProjectStatusTypeNames() []string {
	names := make([]string, 4)
	// 0 item will be a blank
	names[1] = "Open"
	names[2] = "Cancelled"
	names[3] = "Completed"
	return names
}

func ProjectStatusTypeDescriptions() []string {
	descriptions := make([]string, 4)
	// 0 item will be a blank
	descriptions[1] = "The project is currently active"
	descriptions[2] = "The project has been canned"
	descriptions[3] = "The project has been completed successfully"
	return descriptions
}

func ProjectStatusTypeGuidelines() []string {
	guidelines := make([]string, 4)
	// 0 item will be a blank
	guidelines[1] = "All projects that we are working on should be in this state"
	guidelines[2] = ""
	guidelines[3] = "Celebrate successes!"
	return guidelines
}

func ProjectStatusTypeIsActives() []bool {
	is_actives := make([]bool, 4)
	// 0 item will be a blank
	is_actives[1] = true
	is_actives[2] = true
	is_actives[3] = true
	return is_actives
}
