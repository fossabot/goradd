//** This file was code generated by got. DO NOT EDIT. ***

package orm

import (
	"bytes"
	"context"

	"github.com/goradd/goradd/web/examples/gen/goradd/model"
	"github.com/goradd/goradd/web/examples/gen/goradd/model/node"
)

func (ctrl *ManyManyPanel) DrawTemplate(ctx context.Context, buf *bytes.Buffer) (err error) {

	buf.WriteString(`
<h1>Many-to-Many Relationships</h1>
<p>
Many-to-many relationships create slices of related objects on both sides of the relationship.
</p>
<p>
Many-to-many relationships are modeled in SQL databases with an intermediate table, called an Association table.
The association table is a table with just two fields, each field being a foreign key pointing to one side of the
relationship.
</p>
<p>
NoSQL databases store Many-to-many relationships by creating fields in each record that has an array of ids that
point to the other records it is linked to.
</p>
<p>
In either case, the ORM abstracts out the means of creating the relationship so that you do not have to worry about what
is happening in the database. Simply treat each side as a slice
of objects pointing to the other table, and the Goradd ORM will take care of the rest.
</p>
<p>
In the example below, we are using the team member - project association. Any person can be a team member of mnay projects,
and any project can have multiple team members.
`)
	project := model.LoadProject(ctx, "1", node.Project().TeamMembers())
	person := model.LoadPerson(ctx, "1", node.Person().ProjectsAsTeamMember())

	buf.WriteString(`</p>
<p>
    Project `)

	buf.WriteString(project.Name())

	buf.WriteString(` has team members:
    `)
	for _, t := range project.TeamMembers() {
		buf.WriteString(t.FirstName())

		buf.WriteString(` `)

		buf.WriteString(t.LastName())

		buf.WriteString(`, `)
	}

	buf.Truncate(buf.Len() - 2)

	buf.WriteString(`</p>
<p>
    Person `)

	buf.WriteString(person.FirstName())

	buf.WriteString(` `)

	buf.WriteString(person.LastName())

	buf.WriteString(` is a member of these projects:
    `)
	for _, p := range person.ProjectsAsTeamMember() {
		buf.WriteString(p.Name())

		buf.WriteString(`, `)
	}

	buf.Truncate(buf.Len() - 2)

	buf.WriteString(`</p>

`)

	buf.WriteString(`
`)

	return
}
