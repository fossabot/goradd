// listBaseBindData.tmpl

{{

// BindData determines what records will be displayed in the lister.
// Override to change what records get displayed.
func (p *{{= panelName }}) BindData(ctx context.Context, s {{= ctrlPkg }}.DataManagerI) {
    list := {{= ctrlPkg }}.GetPagedTable(p, p.ID() + "-list")
	if list.HasDataPagers() {
		list.SetTotalItems(p.this().BuildQuery(ctx).Count(false))
	}

	builder := p.this().BuildQuery(ctx)

	// Since we are asking the database to do the sort, we have to make a slice of nodes
	sortNodes := column.MakeNodeSlice(list.SortColumns())

	d := builder.Limit(list.SqlLimits()).
		OrderBy(sortNodes...).
		Load()

	s.SetData(d)
}

func (p *{{= panelName }}) BuildQuery(ctx context.Context) *model.{{= t.GoPlural }}Builder {
    filterText := {{= ctrlPkg }}.GetTextboxI(p, p.ID() + "-filterText").Text()
	q := model.Query{{= t.GoPlural }}(ctx)
	q = q.Where(op.Or(
    {{for _,col := range t.Columns }}
    		op.StartsWith(node.{{= t.GoName }}().{{= col.GoName }}(), filterText),
    {{for}}
    	))
	{{for _,col := range t.Columns}}
	{{if col.IsReference() }}
	 q = q.Join(node.{{= t.GoName}}().{{= col.ReferenceFunction()}}())
	{{if}}
	{{for}}
    {{for _,ref := range t.ReverseReferences}}
    {{if ref.IsUnique() }}
    q = q.Join(node.{{= t.GoName}}().{{= ref.GoName}}())
    {{else}}
    q = q.Join(node.{{= t.GoName}}().{{= ref.GoPlural}}())
    {{if}}
    {{for}}
    {{for _,ref := range t.ManyManyReferences}}
    q = q.Join(node.{{= t.GoName}}().{{= ref.GoPlural}}())
    {{for}}
	return q
}

}}
