//connector.tmpl

// The template for the connector classes

for _,col := range t.Columns {
    cd := t.ControlDescription(col)
    if cd == nil {continue}
    if cd.Generator != nil {
        sRefresh := cd.Generator.GenerateRefresh(col, cd)
        sUpdate := cd.Generator.GenerateUpdate(col, cd)


{{
type {{= cd.Connector }}  struct {
}

func (c {{= cd.Connector }}) Refresh(i page.ControlI, data interface{}) {
{{if sRefresh != ""}}
    if ctrl, ok := i.(*{{= cd.Import.Alias}}.{{= cd.ControlType}}); ok {
{{if col.IsReference() && col.ForeignKey.IsType}}
        val := data.(*model.{{= t.GoName }}).{{= col.ReferenceFunction(dd) }}().ID()
{{else}}
        val := data.(*model.{{= t.GoName }}).{{= col.GoName }}()
{{if}}
        {{= sRefresh }}
    }
{{if}}
}

func (c {{= cd.Connector }}) Update(i page.ControlI, data interface{}) {
{{if sUpdate != ""}}
   if ctrl, ok := i.(*{{= cd.Import.Alias}}.{{= cd.ControlType}}); ok {
        {{= sUpdate }}
{{if col.IsReference() && col.ForeignKey.IsType}}
        data.(*model.{{= t.GoName }}).Set{{= col.ReferenceFunction(dd) }}(model.{{= col.ForeignKey.GoType }}(val))
{{else}}
        data.(*model.{{= t.GoName }}).Set{{= col.GoName }}(val)
{{if}}
    }
{{if}}
}

}}

        if provider,ok := cd.Generator.(generator.ProviderGenerator); ok {
{{
func (c {{= cd.Connector }}) Load(ctx context.Context) []interface{} {
{{= provider.GenerateProvider(col, cd) }}
}

}}
        }

{{
func init() {
	gob.Register(&{{= cd.Connector }}{})
}

}}

    }


}


