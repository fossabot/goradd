//connector.tmpl

// The template for the connector classes

for _,col := range t.Columns {
    if col.Generator != nil {
        sRefresh := col.Generator.GenerateRefresh(&col)
        sUpdate := col.Generator.GenerateUpdate(&col)


{{
type {{= col.Connector }}  struct {
}

func (c {{= col.Connector }}) Refresh(i page.ControlI, data interface{}) {
{{if sRefresh != ""}}
    if ctrl, ok := i.(*{{= col.Import.Alias}}.{{= col.ControlType}}); ok {
{{if col.IsReference() && col.ForeignKey.IsType}}
        val := int(data.(*model.{{= t.GoName }}).{{= col.ReferenceFunction(dd) }}())
{{else}}
        val := data.(*model.{{= t.GoName }}).{{= col.GoName }}()
{{if}}
        {{= sRefresh }}
    }
{{if}}
}

func (c {{= col.Connector }}) Update(i page.ControlI, data interface{}) {
{{if sUpdate != ""}}
   if ctrl, ok := i.(*{{= col.Import.Alias}}.{{= col.ControlType}}); ok {
        {{= sUpdate }}
{{if col.IsReference() && col.ForeignKey.IsType}}
        data.(*model.{{= t.GoName }}).Set{{= col.ReferenceFunction(dd) }}(model.{{= col.ForeignKey.GoType }}(val))
{{else}}
        data.(*model.{{= t.GoName }}).Set{{= col.GoName }}(val)
{{if}}
    }
{{if}}
}

}}

        if provider,ok := col.Generator.(generator.ProviderGenerator); ok {
{{
func (c {{= col.Connector }}) Load(ctx context.Context) []interface{} {
{{= provider.GenerateProvider(&col) }}
}

}}
        }

{{
func init() {
	gob.Register(&{{= col.Connector }}{})
}

}}

    }


}


