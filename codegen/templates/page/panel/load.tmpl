{{
// Load reads a new record from the database and loads the edit controls with the information found. pk is the primary key
// of the record.
func (p *{{= panelName }}) Load(ctx context.Context, pk {{= t.PrimaryKeyGoType() }}) error {

	if pk == {{= t.PrimaryKeyColumn().DefaultValueAsConstant() }} {
		p.{{= t.GoName }} = model.New{{= t.GoName }}()
	} else {
		p.{{= t.GoName }} = model.Load{{= t.GoName }}(ctx, pk,
{{for _,rr := range t.ReverseReferences}}
    {{if rr.IsUnique() }}
            node.{{= t.GoName}}().{{= rr.GoName}}(),
    {{else}}
            node.{{= t.GoName}}().{{= rr.GoPlural}}(),
    {{if}}
{{for}}
		)

		if p.{{= t.GoName }} == nil {
			d := control.Alert(p.ParentForm(), p.ParentForm().GT("The record was not found. Perhaps it was recently deleted by someone else."), "OK")
			d.SetTitle(p.ParentForm().GT("Error"))
			return page.NewFrameworkError(page.FrameworkErrRecordNotFound)
		}
	}

	p.Refresh()

	return nil
}

// Refresh loads the controls with data from the cached {{= t.GoName }} object.
func (p *{{= panelName }}) Refresh() {
    p.RangeAllChildren(func(ctrl page.ControlI) {
        ctrl.RefreshData(p.{{= t.GoName }})
    })
}

// Update loads the cached {{= t.GoName }} object with data from the controls.
func (p *{{= panelName }}) Update() {
    p.RangeAllChildren(func(ctrl page.ControlI) {
        ctrl.UpdateData(p.{{= t.GoName }})
    })
}

// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *{{= panelName }}) Reload(ctx context.Context) error {
    return p.this().Load(ctx, p.{{= t.GoName }}.PrimaryKey())
}

// Save writes out the data that is currently in the controls
func (p *{{= panelName }}) Save(ctx context.Context) {
    p.this().Update()
    p.{{= t.GoName }}.Save(ctx)
}

// Delete deletes the object currently being edited
func (p *{{= panelName }}) Delete(ctx context.Context) {
    p.{{= t.GoName }}.Delete(ctx)
}


}}