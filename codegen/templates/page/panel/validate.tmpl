// Validate validates the user's input. This version applies validation rules that can be determined by the database structure.
{{
func (p *{{= panelName }}) Validate(ctx context.Context) bool {
	isValid := p.Panel.Validate(ctx)

{{g
    if t.Indexes != nil {
        for _,idx := range t.Indexes {
            if !idx.IsPrimary && idx.IsUnique {
                var columns []*generator.ColumnType
                var names string

                for _,name := range idx.ColumnNames {
                    col := t.GetColumnByDbName(name)
                    if col == nil {
                        panic("Cannot find column " + name + " of table " + t.DbName)
                    }
                    columns = append(columns, col)
                    names += col.GoName
                }
{{
    if p.{{= columns[0].ControlName }} != nil {{for _,col := range columns[1:]}} && p.{{= col.ControlName }} != nil {{for}}{
        obj := model.Load{{t.GoName}}By{{= names}}(ctx, p.{{= columns[0].ControlName}}.Value().({{= columns[0].ColumnType.GoType() }}){{for _,col := range columns[1:]}}, p.{{= col.ControlName }}.Value().({{= col.ColumnType.GoType() }}){{for}})
		if obj != nil && obj.{{= t.PrimaryKeyColumn.GoName}}() != p.Connector.{{t.GoName}}.{{= t.PrimaryKeyColumn.GoName}}() {
			isValid = false
{{for _,col := range columns}}
			p.{{= col.ControlName }}.SetValidationError(p.Î©T("This value is already in use, please choose a different one."))
{{for}}
		}
    }
}}

            }
        }
    }
}}

    return isValid
}

}}
