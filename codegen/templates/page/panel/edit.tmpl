//edit.tmpl

// The master template for the EditPanel classes

var panelName = t.GoName + "EditPanel"

{{

package panel

// This implementation file is not modified during code generation. Changes to this file will be preserved.

import(
	"github.com/goradd/goradd/pkg/page"
	"github.com/goradd/goradd/pkg/page/control"
	"context"
	"goradd-project/gen/{{dd.DbKey}}/connector"
	"goradd-project/gen/{{dd.DbKey}}/model"
)

type {{= panelName }} struct {
	{{= panelName }}Base
}

func New{{= panelName }}(ctx context.Context, parent page.ControlI, id string) *{{= panelName}} {
    p := new({{= panelName }})
	p.Init(ctx, p, parent, id)
	return p
}

func (p *{{= panelName }}) Init(ctx context.Context, self page.ControlI, parent page.ControlI, id string) {
	p.{{= panelName }}Base.Init(self, parent, id)
	p.CreateControls(ctx)
}

/* Override and call base class, or completely replace as you need
func (p *{{= panelName }}) CreateControls(ctx context.Context) {
    p.{{= panelName }}Base.CreateControls(ctx)
}
*/

/* Override and call base class, or completely replace as you need
// Load loads up the edit panel with data from the database. pk is the primary key of a model.{{= t.GoName }}
// database record
func (p *{{= panelName }}) Load(ctx context.Context, pk string) error {
}
*/

/* Override and call base class, or completely replace as you need
// Validate validates the controls in the panel
func (p *{{= panelName }}) Validate(ctx context.Context) bool {
	isValid := p.{{= panelName }}Base.Validate(ctx)

	// add other validations here
    return isValid
}
*/

/* Override and call base class, or completely replace as you need
// Refresh loads the controls with data from the cached model.{{= t.GoName }} object.
func (p *{{= panelName }}) Refresh() {
    p.Connector.Refresh()
}
*/

/* Override and call base class, or completely replace as you need
// Reload loads the controls with data found in the database, over-writing any changes made to the internal data object.
func (p *{{= panelName }}) Reload(ctx context.Context) {
    p.Load(p.{{= t.GoName }}.PrimaryKey())
}
*/

/* Override and call base class, or completely replace as you need
// Save writes out the data that is currently in the controls
func (p *{{= panelName }}) Save(ctx context.Context) {
    p.Connector.Save(ctx)
}
*/

/* Override and call base class, or completely replace as you need
// Delete deletes the object currently being edited
func (p *{{= panelName }}) Delete(ctx context.Context) {
    p.Connector.Delete(ctx)
}
*/

type {{t.GoName}}EditPanelCreator struct {
	ID string
}

func (c {{t.GoName}}EditPanelCreator) Create(ctx context.Context, parent page.ControlI) page.ControlI {
	p := New{{panelName}}(ctx, parent, c.ID)
	return p
}

func Get{{= panelName }}(c page.ControlI, id string) *{{= panelName }} {
	return c.Page().GetControl(id).(*{{= panelName }})
}

}}