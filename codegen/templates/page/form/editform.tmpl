//editForm.tmpl

// The master template for the EditForm classes

// Variables used below
var dbkey = strings.Title(dd.DbKey)
var title  = dbkey + t.GoName
var formName = title + "EditForm"
var formPath = path.Join("/goradd/form/",dd.DbKey,t.GoName + "Edit")
var listFormPath = path.Join("/goradd/form/",dd.DbKey,t.GoName + "List")


{{
package form

// Code generated by goradd. DO NOT EDIT, since your changes will be lost the next time you generate code.
// To modify this form and preserver the changes, move this file to a different location,
// like the goradd-project/web/form directory, and also change the {{= title }}EditPath const below
// to a different path.

import (
    "github.com/goradd/goradd/pkg/page"
    .  "github.com/goradd/goradd/pkg/page/control"
    "goradd-project/gen/{{dd.DbKey}}/panel"
    "goradd-project/control"
    "context"
    "github.com/goradd/goradd/pkg/page/action"
    "fmt"
)

// {{= title }}EditPath specifies the URL that will access this form.
const {{= title }}EditPath = "{{= formPath }}"
// {{= title }}EditID is the html id to use in the html form object.
const {{= title }}EditID = "{{= formName }}"
const {{= title }}Singular = "{{= t.LiteralName }}"
const {{= title }}Plural = "{{= t.LiteralPlural }}"

const {{= title }}EditPanelID = "edit-panel"
const {{= title }}SaveButtonID = "save-button"
const {{= title }}CancelButtonID = "cancel-button"
const {{= title }}DeleteButtonID = "delete-button"

const (
    {{= title }}SaveAction = iota + 1
    {{= title }}CancelAction
    {{= title }}DeleteAction
)


// The {{= formName }} is a form wrapper for the corresponding edit panel.
// To edit it, make a copy and move it out of this package and into another
type {{= formName }} struct {
    control.FormBase
}

func New{{= formName }}(ctx context.Context) page.FormI {
    f := new({{= formName }})
    f.Init(ctx, f, {{= title }}EditPath, {{= title }}EditID)
    return f
}

func (f *{{= formName }})Init(ctx context.Context, self page.FormI, path string, id string) {
    f.FormBase.Init(ctx, self, path, id)

	f.AddRelatedFiles()
	f.createControls(ctx)
}

// Run is called by the framework before the page is operated on, either through Ajax or Server calls.
// This is a good place to do anything that needs to happen before doing any of your actions or drawing,
// like checking if the user is authorized to access the page.
func (f *{{= formName }})Run(ctx context.Context) (err error) {

    // If you are authorizing the current user, do that here
    // if !authorized() {
    //    return page.FrameworkErrNotAuthorized
    //}

	return
}

// AddRelatedFiles is called by the framework to add javascript, css, and other files that the form
// will rely on.
func (f *{{= formName }}) AddRelatedFiles() {
    f.FormBase.AddRelatedFiles()

    // Add additional javascript, css and other files here
}

func (f *{{= formName }}) createControls(ctx context.Context) {
    f.AddControls(ctx,
        panel.{{= t.GoName }}EditPanelCreator {
            ID: {{= title }}EditPanelID,
        },
        ButtonCreator {
            ID: {{= title }}SaveButtonID,
            Text: f.ΩT("Save"),
            OnSubmit: action.Ajax(f.ID(), {{= title }}SaveAction),
        },
        ButtonCreator {
            ID: {{= title }}CancelButtonID,
            Text: f.ΩT("Cancel"),
            OnSubmit: action.Ajax(f.ID(), {{= title }}CancelAction),
        },
        ButtonCreator {
            ID: {{= title }}DeleteButtonID,
            Text: f.ΩT("Delete"),
 	        OnSubmit: action.Group (
                action.Confirm(f.ΩT("Are you sure you want to delete this item?")),
                action.Ajax(f.ID(), {{= title }}DeleteAction),
 	        ),
 	        ValidationType: page.ValidateNone,
       },
    )
}


// LoadControls is called by the framework after creating the form.
// It is the place to load up the form controls with data after the form has been created.
func (f *{{= formName }}) LoadControls(ctx context.Context) {
    if id, ok := page.GetContext(ctx).FormValue("id"); ok {
 	    err := panel.Get{{= t.GoName }}EditPanel(f, {{= title }}EditPanelID).Load(ctx, id)
 	    if err != nil {
            GetButton(f, {{= title }}DeleteButtonID).SetVisible(true)
            f.Page().SetTitle(f.ΩT("Edit"))
            return
 	    }
 	    // drop through on failure
    }
    _ = panel.Get{{= t.GoName }}EditPanel(f, {{= title }}EditPanelID).Load(ctx, "")
    GetButton(f, {{= title }}DeleteButtonID).SetVisible(false)
    f.Page().SetTitle(f.ΩT("Create"))
}

// Action is called by the framework to execute any Server or Ajax actions you have assigned to controls
// and directed here.
func (f *{{= formName }}) Action(ctx context.Context, a page.ActionParams) {
	switch a.ID {
	case {{= title }}SaveAction:
	    panel.Get{{= t.GoName }}EditPanel(f, {{= title }}EditPanelID).Save(ctx)
	    f.returnToPrevious(ctx)
    case {{= title }}CancelAction:
        f.returnToPrevious(ctx)
    case {{= title }}DeleteAction:
        panel.Get{{= t.GoName }}EditPanel(f, {{= title }}EditPanelID).Delete(ctx)
        f.returnToPrevious(ctx)
    }
}

func (f *{{= formName }}) returnToPrevious(ctx context.Context) {
	f.PopLocation(ctx, "{{= listFormPath }}")
}

// init functions are called once when the web server first starts up.
func init() {
	page.RegisterPage({{= title }}EditPath,  New{{= formName }}, {{= title }}EditID)
}


}}

