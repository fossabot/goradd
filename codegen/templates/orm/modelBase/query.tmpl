//query.tmpl
// Top level query functions

{{

// Load returns a {{t.GoName}} from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
func Load{{= t.GoName }}(ctx context.Context, primaryKey {{= t.PrimaryKeyColumn().ColumnType.GoType() }}, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
	return query{{t.GoPlural}}(ctx).Where(Equal(node.{{t.GoName}}().{{t.PrimaryKeyColumn().GoName}}(), primaryKey)).joinOrSelect(joinOrSelectNodes...).Get(ctx)
}

{{g
    if t.Indexes != nil {
        for _,idx := range t.Indexes {
            if idx.IsUnique {
{{
// Load{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} queries for a single {{t.GoName}} object by the given unique index values.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
// If you need a more elaborate query, use Query{{t.GoPlural}}() to start a query builder.
func Load{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} (ctx context.Context{{for _,name := range idx.ColumnNames}}, {{= name }} {{= t.GetColumn(name).ColumnType.GoType() }} {{for}}, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
    return query{{t.GoPlural}}(ctx).
{{if len(idx.ColumnNames) == 1}}
        Where(Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(idx.ColumnNames[0]) }}(), {{= idx.ColumnNames[0] }})).
{{else}}
        Where(And({{for _,name := range idx.ColumnNames}}Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(name) }}(), {{= name }}), {{for}})).
{{if}}
        joinOrSelect(joinOrSelectNodes...).
        Get(ctx)
}

// Has{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} returns true if the
// given unique index values exist in the database.
func Has{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} (ctx context.Context{{for _,name := range idx.ColumnNames}}, {{= name }} {{= t.GetColumn(name).ColumnType.GoType() }} {{for}}) bool {
    return query{{t.GoPlural}}(ctx).
{{if len(idx.ColumnNames) == 1}}
        Where(Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(idx.ColumnNames[0]) }}(), {{= idx.ColumnNames[0] }})).
{{else}}
        Where(And({{for _,name := range idx.ColumnNames}}Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(name) }}(), {{= name }}), {{for}})).
{{if}}
        Count(ctx, false) == 1
}

}}
            }
        }
    }
}}

}}

