//query.tmpl
// Top level query functions

{{

// Load returns a {{t.GoName}} from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
func Load{{t.GoName}}(ctx context.Context, primaryKey string, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
	return query{{t.GoPlural}}(ctx).Where(Equal(node.{{t.GoName}}().{{t.PrimaryKeyColumn().GoName}}(), primaryKey)).joinOrSelect(joinOrSelectNodes...).Get(ctx)
}

{{g
    if t.Indexes != nil {
        for _,idx := range t.Indexes {
            if idx.IsUnique {
{{
// Load{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} queries for a single {{t.GoName}} object by the given unique index values.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See Join() and Select() for more info.
// If you need a more elaborate query, use Query{{t.GoPlural}}() to start a query builder.
func Load{{t.GoName}}By{{for _,name := range idx.ColumnNames}}{{= db.UpperCaseIdentifier(name) }}{{for}} (ctx context.Context{{for _,name := range idx.ColumnNames}}, {{= name }} {{= t.GetColumn(name).ColumnType.GoType() }} {{for}}, joinOrSelectNodes ...query.NodeI) *{{t.GoName}} {
    return query{{t.GoPlural}}(ctx).
{{if len(idx.ColumnNames) == 1}}
        Where(Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(idx.ColumnNames[0]) }}(), {{= idx.ColumnNames[0] }})).
{{else}}
        Where(And({{for _,name := range idx.ColumnNames}}Equal(node.{{t.GoName}}().{{= db.UpperCaseIdentifier(name) }}(), {{= name }}), {{for}})).
{{if}}
        joinOrSelect(joinOrSelectNodes...).
        Get(ctx)
}
}}
            }
        }
    }
}}

{{g builderName := t.GoPlural + "Builder" }}

// The {{builderName}} uses the QueryBuilderI interface from the database to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, Count, or Delete
type {{builderName}} struct {
	base query.QueryBuilderI
	hasConditionalJoins bool
}

func new{{t.GoName}}Builder() *{{builderName}} {
	b := &{{builderName}}{
		base: db.GetDatabase("{{t.DbKey}}").
		NewBuilder(),
	}
	return b.Join(node.{{t.GoName}}())
}

// Load terminates the query builder, performs the query, and returns a slice of {{t.GoName}} objects. If there are
// any errors, they are returned in the context object. If no results come back from the query, it will return
// an empty slice
func (b *{{builderName}}) Load(ctx context.Context) ({{t.LcGoName}}Slice []*{{t.GoName}}) {
	results := b.base.Load(ctx)
	if results == nil {
		return
	}
	for _,item := range results {
		o := new({{t.GoName}})
		o.load(item, !b.hasConditionalJoins, o, nil, "")
		{{t.LcGoName}}Slice = append({{t.LcGoName}}Slice, o)
	}
	return {{t.LcGoName}}Slice
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces. If there are
// any errors, they are returned in the context object. If no results come back from the query, it will return
// an empty slice.
func (b *{{builderName}}) LoadI(ctx context.Context) ({{t.LcGoName}}Slice []interface{}) {
	results := b.base.Load(ctx)
	if results == nil {
		return
	}
	for _,item := range results {
		o := new({{t.GoName}})
		o.load(item, !b.hasConditionalJoins, o, nil, "")
		{{t.LcGoName}}Slice = append({{t.LcGoName}}Slice, o)
	}
	return {{t.LcGoName}}Slice
}


// Get is a convenience method to return only the first item found in a query. It is equivalent to adding
// Limit(1,0) to the query, and then getting the first item from the returned slice.
// Limits with joins do not currently work, so don't try it if you have a join
// TODO: Change this to Load1 to be more descriptive and avoid confusion with other Getters
func (b *{{builderName}}) Get(ctx context.Context) *{{t.GoName}} {
	results := b.Limit(1,0).Load(ctx)
	if results != nil && len(results) > 0 {
	    obj := results[0]
		return obj
	} else {
		return nil
	}
}

// Expand expands an array type node so that it will produce individual rows instead of an array of items
func (b *{{builderName}}) Expand(n query.NodeI) *{{builderName}} {
	b.base.Expand(n)
	return b
}

// Join adds a node to the node tree so that its fields will appear in the query. Optionally add conditions to filter
// what gets included. The conditions will be AND'd with the basic condition matching the primary keys of the join.
func (b *{{builderName}}) Join(n query.NodeI, conditions... query.NodeI) *{{builderName}} {
	var condition query.NodeI
	if len(conditions) > 1 {
		condition = And(conditions)
	} else if len(conditions) == 1 {
		condition = conditions[0]
	}
	b.base.Join(n, condition)
	if condition != nil {
		b.hasConditionalJoins = true
	}
	return b
}

// Where adds a condition to filter what gets selected.
func (b *{{builderName}})  Where(c query.NodeI) *{{builderName}} {
	b.base.Condition(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
func (b *{{builderName}})  OrderBy(nodes... query.NodeI) *{{builderName}} {
	b.base.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified
func (b *{{builderName}})  Limit(maxRowCount int, offset int) *{{builderName}} {
	b.base.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields. Once you put a Select in your query, you must
// specify all the fields that you will eventually read out. Be careful when selecting fields in joined tables, as joined
// tables will also contain pointers back to the parent table, and so the parent node should have the same field selected
// as the child node if you are querying those fields.
func (b *{{builderName}})  Select(nodes... query.NodeI) *{{builderName}} {
	b.base.Select(nodes...)
	return b
}

// Alias lets you add a node with a custom name. After the query, you can read out the data using GetAlias() on a
// returned object. Alias is useful for adding calculations or subqueries to the query.
func (b *{{builderName}})  Alias(name string, n query.NodeI) *{{builderName}} {
	b.base.Alias(name, n)
	return b
}

// Distinct removes duplicates from the results of the query. Adding a Select() may help you get to the data you want, although
// using Distinct with joined tables is often not effective, since we force joined tables to include primary keys in the query, and this
// often ruins the effect of Distinct.
func (b *{{builderName}})  Distinct() *{{builderName}} {
	b.base.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions in an Alias() call.
func (b *{{builderName}})  GroupBy(nodes... query.NodeI) *{{builderName}} {
	b.base.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query.
func (b *{{builderName}})  Having(node query.NodeI)  *{{builderName}} {
	 b.base.Having(node)
	 return b
}

// Count terminates a query and returns just the number of items selected.
func (b *{{builderName}})  Count(ctx context.Context, distinct bool, nodes... query.NodeI) uint {
	return b.base.Count(ctx, distinct, nodes...)
}

// Delete uses the query builder to delete a group of records that match the criteria
func (b *{{builderName}})  Delete(ctx context.Context) {
	 b.base.Delete(ctx)
}

// Subquery uses the query builder to define a subquery within a larger query. You MUST include what
// you are selecting by adding Alias or Select functions on the subquery builder. Generally you would use
// this as a node to an Alias function on the surrounding query builder.
func (b *{{builderName}})  Subquery() *query.SubqueryNode {
	 return b.base.Subquery()
}


// joinOrSelect is a private helper function for the Load* functions
func (b *{{builderName}}) joinOrSelect(nodes ...query.NodeI) *{{builderName}} {
	for _,n := range nodes {
		switch n.(type) {
		case query.TableNodeI:
			b.base.Join(n, nil)
		case *query.ColumnNode:
			b.Select(n)
		}
	}
	return b
}


}}

