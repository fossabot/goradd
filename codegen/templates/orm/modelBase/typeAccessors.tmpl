//typeAccessors.tmpl

for _,col := range t.Columns {
	if !col.IsReference() || !col.ForeignKey.IsType {
		continue
	}

	suf := 	snaker.SnakeToCamel(dd.ForeignKeySuffix)
	goName := strings.TrimSuffix(col.GoName, suf)

{{


func (o *{{privateName}}Base) {{= goName }}() {{= col.ForeignKey.GoType }} {
	if o._restored && !o.{{= col.ModelName }}IsValid {
		panic ("{{= col.ModelName }} was not selected in the last query and so is not valid")
	}
	return {{= col.ForeignKey.GoType }}(o.{{= col.ModelName }})
}

}}

	if col.IsNullable {
{{

func (o *{{privateName}}Base) {{= goName }}IsNull() bool {
	return o.{{= col.ModelName }}IsNull
}

}}
	}

	// If the column is nullable, we use an interface to allow a null to be passed in
	if col.IsNullable {
{{

func (o *{{privateName}}Base) Set{{= goName }}(i interface{}) {
	if i == nil {
		if !o.{{= col.ModelName }}IsNull {
			o.{{= col.ModelName }}IsNull = true
			o.{{= col.ModelName }}IsDirty = true
			o.{{= col.ModelName }}IsValid = true
			o.{{= col.ModelName }} = {{= col.DefaultValueAsValue() }}
		}
	} else {
		v := i.({{= col.ColumnType.GoType() }})
		if o.{{= col.ModelName }}IsNull  {
			o.{{= col.ModelName }}IsNull = false
			o.{{= col.ModelName }} = v
			o.{{= col.ModelName }}IsDirty = true
		}
	}
}

}}
	} else {
{{

func (o *{{privateName}}Base) Set{{= goName }}(v {{= col.ForeignKey.GoType }}) {
	if o.{{= col.ModelName }} != {{= col.ColumnType.GoType() }}(v) {
		o.{{= col.ModelName }} = {{= col.ColumnType.GoType() }}(v)
		o.{{= col.ModelName }}IsDirty = true
		o.{{= col.ModelName }}IsValid = true
	}
}

}}
	}

} // for