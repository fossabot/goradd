//reverseRefAccessors.tmpl
for _,ref := range t.ReverseReferences {
	var oName string
	var mName string

	if ref.IsUnique {
		oName = dd.AssociatedObjectPrefix + ref.GoName
	} else {
		oName = dd.AssociatedObjectPrefix + ref.GoPlural
		mName = "m" + ref.GoPlural
	}


	if ref.IsUnique {
	    associatedGoName := snaker.SnakeToCamel(ref.AssociatedColumnName)
{{

// {{ref.GoName}} returns the connected {{ref.GoType}} object, if one was loaded
// otherwise, it will return nil.
func (o *{{privateName}}Base) {{= ref.GoName }}() *{{ref.GoType}} {
	if o.{{oName}} == nil {
		return nil
	}
	return o.{{oName}}
}

// Load{{ref.GoName}} returns the connected {{ref.GoType}} object, if one was loaded
// otherwise, it will return nil.
func (o *{{privateName}}Base) Load{{= ref.GoName }}(ctx context.Context) *{{ref.GoType}} {
	if o.{{oName}} == nil {
		o.{{oName}} = load{{ref.GoType}}By{{= associatedGoName }}(ctx, o.{{= t.PrimaryKeyColumn.GoName }}())
	}
	return o.{{oName}}
}


}}
	} else {
		associatedGoName := snaker.SnakeToCamel(ref.AssociatedColumnName)

{{
// {{ref.GoName}} returns a single {{ref.GoType}} object by primary key, if one was loaded.
// Otherwise, it will return nil.
func (o *{{privateName}}Base) {{= ref.GoName }}(pk string) *{{ref.GoType}} {
	if o.{{oName}} == nil || len(o.{{oName}}) == 0 {
		return nil
	}
	v,_ := o.{{mName}}[pk]
	return v
}

}}

{{

// {{ref.GoPlural}} returns a slice of {{ref.GoType}} objects if loaded.
func (o *{{privateName}}Base) {{= ref.GoPlural }}() []*{{ref.GoType}} {
	if o.{{oName}} == nil {
		return nil
	}
	return o.{{oName}}
}

// Load{{ref.GoPlural}} loads a new slice of {{ref.GoType}} objects and returns it.
func (o *{{privateName}}Base) Load{{= ref.GoPlural }}(ctx context.Context, conditions ...interface{}) []*{{ref.GoType}} {
	qb := query{{ref.GoTypePlural}}()
	cond := Equal(node.{{= ref.GoType }}().{{= associatedGoName }}(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
	    cond = And(conditions...)
	}

	o.{{oName}} = qb.Where(cond).Load(ctx)
	return o.{{oName}}
}


}}
	}

}
