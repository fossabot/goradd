//TODO: Make sure dirty related objects are saved first
// TODO: Make sure id field cannot be set or updated

{{

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
func (o *{{privateName}}Base) Save(ctx context.Context)  {
	if o._restored {
		o.Update(ctx)
	} else {
		o.Insert(ctx)
	}
}

// Update will update the values in the database, saving any changed values.
func (o *{{privateName}}Base) Update(ctx context.Context) {
	if !o._restored {
		panic ("Cannot update a record that was not originally read from the database.")
	}
	m := o.getModifiedFields()
	if len(m) == 0 {
		return
	}
	d := db.GetDatabase("{{t.DbKey}}")
	d.Update(ctx, "{{t.DbName}}", m, "{{= t.PrimaryKeyColumn().DbName }}", fmt.Sprint(o.{{= t.PrimaryKeyColumn().ModelName }}))
	o.resetDirtyStatus()
    broadcast.Update(ctx, "{{t.DbKey}}", "{{t.DbName}}", fmt.Sprintf("%v", o.{{= t.PrimaryKeyColumn().ModelName }}), stringmap.SortedKeys(m)...)
}

// Insert forces the object to be inserted into the database. If the object was loaded from the database originally,
// this will create a duplicate in the database.
func (o *{{privateName}}Base) Insert(ctx context.Context) {
	m := o.getModifiedFields()
	if len(m) == 0 {
		return
	}
	d := db.GetDatabase("{{t.DbKey}}")
    txid := d.Begin(ctx)
    defer d.Rollback(ctx, txid)

{{if t.PrimaryKeyColumn().IsId }}
	id := d.Insert(ctx, "{{t.DbName}}", m)
	o.{{= t.PrimaryKeyColumn().ModelName }} = id
{{else}}
	d.Insert(ctx, "{{t.DbName}}", m)
{{if}}

{{for _,ref := range t.ReverseReferences }}
    if o.{{= ref.Values["objName"]}}IsDirty {

    }
{{for}}
    d.Commit(ctx, txid)
	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "{{t.DbKey}}", "{{t.DbName}}", fmt.Sprint(o.{{= t.PrimaryKeyColumn().ModelName }}))
}

func (o *{{privateName}}Base) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
}}

for _,col := range t.Columns {
{{
	if o.{{= col.ModelName }}IsDirty {
{{if col.IsNullable}}
        if 	o.{{= col.ModelName }}IsNull {
            fields["{{= col.DbName }}"] = nil
        } else {
  		    fields["{{= col.DbName }}"] = {{if col.ColumnType == query.ColTypeDateTime }}o.{{= col.ModelName }}.GoTime(){{else}}o.{{= col.ModelName }}{{if}}
        }
{{else}}
		fields["{{= col.DbName }}"] = {{if col.ColumnType == query.ColTypeDateTime }}o.{{= col.ModelName }}.GoTime(){{else}}o.{{= col.ModelName }}{{if}}
{{if}}
	}

}}
}

{{
	return
}

}}

