dbKey := t.DbKey
tableName := t.DbName

for _,col := range t.Columns {
{{

func (n *{{privateName}}Node) {{= col.GoName }}() *query.ColumnNode {
	cn := query.NewColumnNode (
		"{{= dbKey }}",
		"{{= tableName }}",
		"{{= col.DbName }}",
		"{{= col.GoName }}",
		query.{{= col.ColumnType.String() }},
		{{if col.IsPk}}true{{else}}false{{if}},
	)
	query.SetParentNode(cn, n)
	return cn
}

}}

	if col.ForeignKey != nil {
		isType := dd.IsTypeTable(col.ForeignKey.TableName)
		var objName string

		if isType {
			objName = dd.TypeTableDescription(col.ForeignKey.TableName).GoName
		} else {
			objName = dd.TableDescription(col.ForeignKey.TableName).GoName
		}
{{
func (n *{{privateName}}Node) {{= col.ForeignKey.GoName }}() *{{= strings2.LcFirst(objName) }}Node {
	cn := &{{= strings2.LcFirst(objName) }}Node {
		query.NewReferenceNode (
			"{{= dbKey }}",
			"{{= tableName }}",
			"{{= col.DbName }}",
			"{{= col.GoName }}",
			"{{= col.ForeignKey.GoName }}",
			"{{= col.ForeignKey.TableName }}",
			"{{= col.ForeignKey.ColumnName }}",
			{{b isType }},
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

}}

	}
}


for _,ref := range t.ManyManyReferences {

	if ref.IsTypeAssociation {
		assnTable := dd.TypeTableDescription(ref.AssociatedTableName)

{{

func (n *{{privateName}}Node) {{= ref.GoPlural }}() *{{= strings2.LcFirst(assnTable.GoName) }}Node  {
	cn := &{{= strings2.LcFirst(assnTable.GoName) }}Node {
		query.NewManyManyNode (
			"{{= t.DbKey }}",
			"{{= ref.AssnTableName }}",
			"{{= ref.AssnColumnName }}",
			"{{= ref.GoPlural }}",
			"{{= ref.AssociatedTableName }}",
			"{{= ref.AssociatedColumnName }}",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}
	} else {

		assnTable := dd.TableDescription(ref.AssociatedTableName)
{{

func (n *{{privateName}}Node) {{= ref.GoPlural }}() *{{= strings2.LcFirst(assnTable.GoName) }}Node  {
	cn := &{{= strings2.LcFirst(assnTable.GoName) }}Node {
		query.NewManyManyNode (
			"{{= t.DbKey }}",
			"{{= ref.AssnTableName }}",
			"{{= ref.AssnColumnName }}",
			"{{= ref.GoPlural }}",
			"{{= ref.AssociatedTableName }}",
			"{{= ref.AssociatedColumnName }}",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}
	}
}

for _,ref2 := range t.ReverseReferences {
	assnTable := dd.TableDescription(ref2.AssociatedTableName)

	if ref2.IsUnique {

{{

func (n *{{privateName}}Node) {{= ref2.GoName }}() *{{= strings2.LcFirst(assnTable.GoName) }}Node  {

	cn := &{{= strings2.LcFirst(assnTable.GoName) }}Node {
		query.NewReverseReferenceNode (
			"{{= t.DbKey }}",
			"{{= ref2.DbTable }}",
			"{{= ref2.DbColumn }}",
			"{{= ref2.GoName }}",
			"{{= ref2.AssociatedTableName }}",
			"{{= ref2.AssociatedColumnName }}",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}

	} else {
{{

func (n *{{privateName}}Node) {{= ref2.GoPlural }}() *{{= strings2.LcFirst(assnTable.GoName) }}Node  {

	cn := &{{= strings2.LcFirst(assnTable.GoName) }}Node {
		query.NewReverseReferenceNode (
			"{{= t.DbKey }}",
			"{{= ref2.DbTable }}",
			"{{= ref2.DbColumn }}",
			"{{= ref2.GoPlural }}",
			"{{= ref2.AssociatedTableName }}",
			"{{= ref2.AssociatedColumnName }}",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

}}

	}
}