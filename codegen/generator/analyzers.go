package generator

import (
	"github.com/goradd/goradd/pkg/orm/db"
	strings2 "github.com/goradd/goradd/pkg/strings"
	"strings"
)

// columnsWithControls returns the columns associated with a table. Each column has additional
// information that describes the control that is generated by that column.
// imports is the list of imports that are associated with all the controls.
// The first import is the primary one to import the control. The others are ancillary imports
// needed by the control.
func columnsWithControls(t *db.TableDescription) (columns []ColumnType, imports []*ImportType) {
	var aliasToImport = make(map[string]*ImportType)

	for _, col := range t.Columns {
		col2 := ColumnType{ColumnDescription: col}

		typ, newFunc, importName := controlType(col)

		if typ != "" {
			var mainImport *ImportType

			generator := GetControlGenerator(importName, typ)
			if generator != nil {
				for i, importPath := range generator.Imports() {
					var ok bool
					var imp *ImportType
					if imp, ok = aliasToImport[importPath.Alias]; ok {
						if imp.Path != importPath.Path {
							panic("found the same alias with different import path")
						}
					} else {
						imp = &ImportType {
							importPath.Path,
							importPath.Alias,
							i == 0,
						}

						imports = append(imports, imp)
						aliasToImport[importPath.Alias] = imp
					}
					if mainImport == nil {
						mainImport = imp
					}
				}
			}

			var defaultLabel string

			if col.ForeignKey != nil {
				defaultLabel = strings2.Title(col.ForeignKey.GoName)
			} else {
				defaultLabel = strings2.Title(col.DbName)
			}

			var defaultID string
			if GenerateControlIDs {
				defaultID = strings.Replace(t.DbName, "_", "-", -1) + "-" + strings.Replace(col.DbName, "_", "-", -1)
			}

			col2.ControlDescription = ControlDescription{
				Import: mainImport,
				ControlType: typ,
				NewControlFunc: newFunc,
				ControlName: col.GoName + typ,
				ControlID: defaultID,
				DefaultLabel: defaultLabel,
				Generator: generator,
			}
		}
		col2.ControlDescription.Connector = strings2.LcFirst(t.GoName) + col.GoName + "Connector"
		columns = append(columns, col2)
	}

	return
}

// ControlType returns the default type of control for a column. Control types can be customized in other ways too.
func controlType(col *db.ColumnDescription) (typ string, createFunc string, importName string) {
	d := DefaultControlTypeFunc(col)
	return d.Typ, d.CreateFunc, d.ImportName
}
