
propName := tt.GoName
propPlural := tt.GoPlural
propLetter := strings.ToLower(propName[0:1])
keyField := tt.FieldNames[0]

{{
package model

// Code generated by goradd. DO NOT EDIT.

import (
	//"log"
	//"github.com/spekary/goradd/orm/query"
	"strconv"
)

const (
}}
for _,value := range tt.Values {
	key,ok := value[keyField].(uint)
	if !ok {
		key = uint(value[keyField].(int))
	}
	con := tt.Constants[key]
{{
	{{= propName }}{{= con }} {{= propName }} = {{u key }}

}}
}

{{
)

const {{= propName }}MaxValue = {{i len(tt.Values) }}

type {{= propName }} uint

// String returns the name value of the type and satisfies the fmt.Stringer interface
func ({{= propLetter }} {{= propName }}) String() string {
	switch {{= propLetter }} {
	case 0: return ""
{{for _,value := range tt.Values }}
	case {{= generator.AsConstant(value[keyField], query.ColTypeUnsigned) }}: return {{= generator.AsConstant(value[tt.FieldNames[1]], query.ColTypeString) }}
{{for}}
	default: panic("Index out of range")
	}
	return "" // prevent warning
}

// ID returns a string representation of the id and satisfies the IDer interface
func ({{= propLetter }} {{= propName }}) ID() string {
	return strconv.Itoa(int({{= propLetter }}))
}

func {{= propPlural }}() (values []{{= propName }}) {
{{for _,value := range tt.Values }}
    values = append(values, {{= generator.AsConstant(value[keyField], query.ColTypeUnsigned) }})
{{for}}
    return
}


}}

for i,fieldName := range tt.FieldNames[2:] {
	typ := tt.FieldTypes[fieldName]
	typeName := string(tt.FieldTypes[fieldName])
	title := snaker.SnakeToCamel(fieldName)

{{
func ({{= propLetter }} {{= propName }}) {{= title }}() {{= typeName }} {
	switch {{= propLetter }} {
	case 0: return {{= typ.DefaultValue() }}
{{g for _,value := range tt.Values { }}
	case {{= generator.AsConstant(value[keyField], query.ColTypeUnsigned) }}: return {{= generator.AsConstant(value[tt.FieldNames[i+2]], typ) }}
{{g } }}
	default: panic("Index out of range")
	}
	return {{= typ.DefaultValue() }} // prevent warning
}
}}

}


for _,fieldName := range tt.FieldNames[1:] {
	typeName := string(tt.FieldTypes[fieldName])
	varName := inflector.Pluralize(fieldName)
	title := inflector.Pluralize(snaker.SnakeToCamel(fieldName))

{{
func {{= propName }}{{= title }}() []{{= typeName }} {
	{{= varName }} := make([]{{= typeName }}, {{i len(tt.Values) + 1 }})
	// 0 item will be a blank
{{g for i,value := range tt.Values { }}
	{{= varName }}[{{i i + 1 }}] = {{= generator.AsConstant(value[fieldName], tt.FieldTypes[fieldName]) }}
{{g } }}
	return {{= varName }}
}

}}

}
