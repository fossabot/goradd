//** This file was code generated by got. ***

package template

import (
	"bytes"
	"fmt"
	"grlocal/config"
	"strconv"
	"strings"

	"github.com/spekary/goradd/codegen/generator"
	"github.com/spekary/goradd/orm/db"
	"github.com/spekary/goradd/util"
)

func init() {
	t := NodeTemplate{
		generator.Template{
			Overwrite: true,
			TargetDir: config.LocalDir + "/model/node",
		},
	}
	generator.AddTableTemplate(&t)
}

type NodeTemplate struct {
	generator.Template
}

func (n *NodeTemplate) FileName(t *db.TableDescription) string {
	return n.TargetDir + "/" + t.GoName + ".go"
}

func (n *NodeTemplate) GenerateTable(codegen generator.Codegen, dd *db.DatabaseDescription, t *db.TableDescription, buf *bytes.Buffer) {

	// The master template for the nodes for a particular column.

	// ToDo: Move the node creation routines to the database driver, so that nodes can generate their own database code.

	var privateName string

	privateName = strings.ToLower(t.GoName[:1]) + t.GoName[1:]

	buf.WriteString(`package node

// This file is code generated. Do not edit.

import (
	"github.com/spekary/goradd/orm/query"
)
`)

	buf.WriteString(`type `)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node struct {
	query.NodeI
}

func `)
	buf.WriteString(t.GoName)
	buf.WriteString(`() *`)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node {
	n := `)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node {
		query.NewTableNode("`)
	buf.WriteString(t.DbKey)
	buf.WriteString(`", "`)
	buf.WriteString(t.DbName)
	buf.WriteString(`",  "`)
	buf.WriteString(t.GoName)
	buf.WriteString(`"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

`)

	buf.WriteString(`func (n *`)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node) SelectNodes_() (nodes []*query.ColumnNode) {
`)

	for _, col := range t.Columns {

		buf.WriteString(`	nodes = append(nodes, n.`)
		buf.WriteString(fmt.Sprintf("%v", col.GoName))
		buf.WriteString(`())
`)

	}

	buf.WriteString(`	return nodes
}
`)

	buf.WriteString(`func (n *`)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node) PrimaryKeyNode_() (*query.ColumnNode) {
`)

	for _, col := range t.Columns {
		if col.IsPk {

			buf.WriteString(`	return n.`)
			buf.WriteString(fmt.Sprintf("%v", col.GoName))
			buf.WriteString(`()
`)

			break
		}
	}

	buf.WriteString(`}
`)

	buf.WriteString(`func (n *`)
	buf.WriteString(fmt.Sprintf("%v", privateName))
	buf.WriteString(`Node) EmbeddedNode_() query.NodeI {
	return n.NodeI
}
`)

	dbKey := t.DbKey
	tableName := t.DbName

	for _, col := range t.Columns {

		buf.WriteString(`
func (n *`)
		buf.WriteString(fmt.Sprintf("%v", privateName))
		buf.WriteString(`Node) `)
		buf.WriteString(col.GoName)
		buf.WriteString(`() *query.ColumnNode {
	cn := query.NewColumnNode (
		"`)
		buf.WriteString(dbKey)
		buf.WriteString(`",
		"`)
		buf.WriteString(tableName)
		buf.WriteString(`",
		"`)
		buf.WriteString(col.DbName)
		buf.WriteString(`",
		"`)
		buf.WriteString(col.GoName)
		buf.WriteString(`",
		"`)
		buf.WriteString(col.GoType.String())
		buf.WriteString(`",
	)
	query.SetParentNode(cn, n)
	return cn
}

`)

		if col.ForeignKey != nil {
			isType := dd.IsTypeTable(col.ForeignKey.TableName)
			var objName string

			if isType {
				objName = dd.TypeTableDescription(col.ForeignKey.TableName).GoName
			} else {
				objName = dd.TableDescription(col.ForeignKey.TableName).GoName
			}

			buf.WriteString(`func (n *`)
			buf.WriteString(fmt.Sprintf("%v", privateName))
			buf.WriteString(`Node) `)
			buf.WriteString(col.ForeignKey.GoName)
			buf.WriteString(`() *`)
			buf.WriteString(util.LcFirst(objName))
			buf.WriteString(`Node {
	cn := &`)
			buf.WriteString(util.LcFirst(objName))
			buf.WriteString(`Node {
		query.NewReferenceNode (
			"`)
			buf.WriteString(dbKey)
			buf.WriteString(`",
			"`)
			buf.WriteString(tableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(col.DbName)
			buf.WriteString(`",
			"`)
			buf.WriteString(col.GoName)
			buf.WriteString(`",
			"`)
			buf.WriteString(col.ForeignKey.GoName)
			buf.WriteString(`",
			"`)
			buf.WriteString(col.ForeignKey.TableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(col.ForeignKey.ColumnName)
			buf.WriteString(`",
			`)
			buf.WriteString(strconv.FormatBool(isType))
			buf.WriteString(`,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

`)

		}
	}

	for _, ref := range t.ManyManyReferences {

		if ref.IsTypeAssociation {
			assnTable := dd.TypeTableDescription(ref.AssociatedTableName)

			buf.WriteString(`
func (n *`)
			buf.WriteString(fmt.Sprintf("%v", privateName))
			buf.WriteString(`Node) `)
			buf.WriteString(ref.GoPlural)
			buf.WriteString(`() *`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node  {
	cn := &`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node {
		query.NewManyManyNode (
			"`)
			buf.WriteString(t.DbKey)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssnTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssnColumnName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.GoPlural)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssociatedTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssociatedColumnName)
			buf.WriteString(`",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

`)

		} else {

			assnTable := dd.TableDescription(ref.AssociatedTableName)

			buf.WriteString(`
func (n *`)
			buf.WriteString(fmt.Sprintf("%v", privateName))
			buf.WriteString(`Node) `)
			buf.WriteString(ref.GoPlural)
			buf.WriteString(`() *`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node  {
	cn := &`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node {
		query.NewManyManyNode (
			"`)
			buf.WriteString(t.DbKey)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssnTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssnColumnName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.GoPlural)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssociatedTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref.AssociatedColumnName)
			buf.WriteString(`",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

`)

		}
	}

	for _, ref2 := range t.ReverseReferences {
		assnTable := dd.TableDescription(ref2.AssociatedTableName)

		if ref2.IsUnique {

			buf.WriteString(`
func (n *`)
			buf.WriteString(fmt.Sprintf("%v", privateName))
			buf.WriteString(`Node) `)
			buf.WriteString(ref2.GoName)
			buf.WriteString(`() *`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node  {

	cn := &`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node {
		query.NewReverseReferenceNode (
			"`)
			buf.WriteString(t.DbKey)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.DbTable)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.DbColumn)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.GoName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.AssociatedTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.AssociatedColumnName)
			buf.WriteString(`",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

`)

		} else {

			buf.WriteString(`
func (n *`)
			buf.WriteString(fmt.Sprintf("%v", privateName))
			buf.WriteString(`Node) `)
			buf.WriteString(ref2.GoPlural)
			buf.WriteString(`() *`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node  {

	cn := &`)
			buf.WriteString(util.LcFirst(assnTable.GoName))
			buf.WriteString(`Node {
		query.NewReverseReferenceNode (
			"`)
			buf.WriteString(t.DbKey)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.DbTable)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.DbColumn)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.GoPlural)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.AssociatedTableName)
			buf.WriteString(`",
			"`)
			buf.WriteString(ref2.AssociatedColumnName)
			buf.WriteString(`",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

`)

		}
	}

}
