//** This file was code generated by got. ***

package template

import (
	"bytes"
	"fmt"
	"goradd/config"

	"github.com/spekary/goradd/codegen/generator"
	"github.com/spekary/goradd/orm/db"
	"github.com/spekary/goradd/util"
)

func init() {
	t := TypeTableNodeTemplate{
		generator.Template{
			Overwrite: true,
			TargetDir: config.LocalDir + "/model/node",
		},
	}
	generator.AddTypeTableTemplate(&t)
}

type TypeTableNodeTemplate struct {
	generator.Template
}

func (n *TypeTableNodeTemplate) FileName(tt *db.TypeTableDescription) string {
	return n.TargetDir + "/" + tt.GoName + ".go"
}

func (n *TypeTableNodeTemplate) GenerateTypeTable(codegen generator.Codegen, dd *db.DatabaseDescription, tt *db.TypeTableDescription, buf *bytes.Buffer) {
	var nodeName = util.LcFirst(tt.GoName) + "Node"

	buf.WriteString(`package node

// This file is code generated. Do not edit.

import (
	"github.com/spekary/goradd/orm/query"
)

type `)

	buf.WriteString(fmt.Sprintf("%v", nodeName))

	buf.WriteString(` struct {
	query.NodeI
}


func (n *`)

	buf.WriteString(fmt.Sprintf("%v", nodeName))

	buf.WriteString(`) SelectNodes_() (nodes []*query.ColumnNode) {
`)

	i := 0
	fn := tt.FieldGoName(i)
	ft := tt.FieldGoType(i)

	for fn != "" {

		buf.WriteString(`	nodes = append(nodes, n.`)

		buf.WriteString(fn)

		buf.WriteString(`())
`)

		i++
		fn = tt.FieldGoName(i)
		ft = tt.FieldGoType(i)

	}

	buf.WriteString(`	return nodes
}

func (n *`)

	buf.WriteString(fmt.Sprintf("%v", nodeName))

	buf.WriteString(`) PrimaryKeyNode_() (*query.ColumnNode) {
	return n.`)

	buf.WriteString(tt.PkField)

	buf.WriteString(`()
}

func (n *`)

	buf.WriteString(fmt.Sprintf("%v", nodeName))

	buf.WriteString(`) EmbeddedNode_() query.NodeI {
	return n.NodeI
}

`)

	i = 0
	fn = tt.FieldGoName(i)
	ft = tt.FieldGoType(i)

	for fn != "" {

		buf.WriteString(`func (n *`)

		buf.WriteString(fmt.Sprintf("%v", nodeName))

		buf.WriteString(`) `)

		buf.WriteString(fn)

		buf.WriteString(`() *query.ColumnNode {

	cn := query.NewColumnNode (
		"`)

		buf.WriteString(tt.DbKey)

		buf.WriteString(`",
		"`)

		buf.WriteString(tt.DbName)

		buf.WriteString(`",
		"`)

		buf.WriteString(tt.FieldNames[i])

		buf.WriteString(`",
		"`)

		buf.WriteString(fn)

		buf.WriteString(`",
		"`)

		buf.WriteString(ft)

		buf.WriteString(`",
	)
	query.SetParentNode(cn, n)
	return cn
}
`)

		i++
		fn = tt.FieldGoName(i)
		ft = tt.FieldGoType(i)
	}

}
