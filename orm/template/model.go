//** This file was code generated by got. ***

package template

import (
	"bytes"
	"goradd/config"

	"github.com/spekary/goradd/codegen/generator"
	"github.com/spekary/goradd/orm/db"
	"github.com/spekary/goradd/util"
)

func init() {
	t := ModelTemplate{
		generator.Template{
			Overwrite: false,
			TargetDir: config.LocalDir + "/gen",
		},
	}
	generator.AddTableTemplate(&t)
}

type ModelTemplate struct {
	generator.Template
}

func (n *ModelTemplate) FileName(key string, t generator.TableType) string {
	return n.TargetDir + "/" + key + "/model/" + t.GoName + ".go"
}

func (n *ModelTemplate) GenerateTable(codegen generator.Codegen, dd *db.DatabaseDescription, t generator.TableType, buf *bytes.Buffer) {
	// The master template for the model classes

	buf.WriteString(`package model

import (
    "fmt"
)

type `)

	buf.WriteString(t.GoName)

	buf.WriteString(` struct {
	`)

	buf.WriteString(util.LcFirst(t.GoName))

	buf.WriteString(`Base
}

// Create a new `)

	buf.WriteString(t.GoName)

	buf.WriteString(` object and initialize to default values.
func New`)

	buf.WriteString(t.GoName)

	buf.WriteString(`() *`)

	buf.WriteString(t.GoName)

	buf.WriteString(` {
	o := `)

	buf.WriteString(t.GoName)

	buf.WriteString(`{}
	o.Initialize()
	return &o
}

// Initialize or re-initialize a `)

	buf.WriteString(t.GoName)

	buf.WriteString(` database object to default values.
func (o *`)

	buf.WriteString(t.GoName)

	buf.WriteString(`) Initialize() {
	o.`)

	buf.WriteString(util.LcFirst(t.GoName))

	buf.WriteString(`Base.Initialize()
    // Add your own initializations here
}

// String implements the Stringer interface and returns the default label for the object as it appears in html lists.
// Typically you would change this to whatever was pertinent to your application.
func (o *`)

	buf.WriteString(t.GoName)

	buf.WriteString(`) String() string  {
    return fmt.Sprintf("Object id %v", o.PrimaryKey())
}

`)

}

func (n *ModelTemplate) Overwrite() bool {
	return n.Template.Overwrite
}
