//query.tmpl
// Top level query functions

{{
func Load{{t.GoName}}(ctx context.Context, id string) *{{t.GoName}} {
	results := Query{{t.GoPlural}}().Where(Equal(node.{{t.GoName}}().{{t.PrimaryKeyColumn.GoName}}(), id)).Load(ctx)
	if results != nil && len(results) > 0 {
		return results[0]
	} else {
		return nil
	}
}

func Query{{t.GoPlural}}() *{{t.LcGoName}}Builder {
	return new{{t.GoName}}Builder()
}

// The {{t.LcGoName}}Builder is a private object using the QueryBuilderI interface from the database to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, Count, or Delete
type {{t.LcGoName}}Builder struct {
	base db.QueryBuilderI
	hasConditionalJoins bool
}

func new{{t.GoName}}Builder() *{{t.LcGoName}}Builder {
	b := &{{t.LcGoName}}Builder{
		base: db.GetDatabase("{{t.DbKey}}").
		NewBuilder(),
	}
	return b.Join(node.{{t.GoName}}())
}

// Load terminates the query builder, performs the query, and returns a slice of {{t.GoName}} objects. If there are
// any errors, they are returned in the context object. If no results come back from the query, it will return
// an empty slice
func (b *{{t.LcGoName}}Builder) Load(ctx context.Context) ({{t.LcGoName}}Slice []*{{t.GoName}}) {
	results := b.base.Load(ctx)
	if results == nil {
		return
	}
	for _,item := range results {
		o := New{{t.GoName}}()
		o.load(item, !b.hasConditionalJoins, o, nil, "")
		{{t.LcGoName}}Slice = append({{t.LcGoName}}Slice, o)
	}
	return {{t.LcGoName}}Slice
}

// Get is a convenience method to return only the first item found in a query. It is equivalent to adding
// Limit(1,0) to the query, and then getting the first item from the returned slice.
// Limits with joins do not currently work, so don't try it if you have a join
func (b *{{t.LcGoName}}Builder) Get(ctx context.Context) *{{t.GoName}} {
	results := b.Limit(1,0).Load(ctx)
	return results[0]
}

// Expand expands an array type node so that it will produce individual rows instead of an array of items
func (b *{{t.LcGoName}}Builder) Expand(n db.NodeI) *{{t.LcGoName}}Builder {
	b.base.Expand(n)
	return b
}

// Join adds a node to the node tree so that its fields will appear in the query. Optionally add conditions to filter
// what gets included. The conditions will be AND'd with the basic condition matching the primary keys of the join.
func (b *{{t.LcGoName}}Builder) Join(n db.NodeI, conditions... db.NodeI) *{{t.LcGoName}}Builder {
	b.base.Join(n, conditions...)
	if conditions != nil {
		b.hasConditionalJoins = true
	}
	return b
}

// Where adds a condition to filter what gets selected.
func (b *{{t.LcGoName}}Builder)  Where(c db.NodeI) *{{t.LcGoName}}Builder {
	b.base.Condition(c)
	return b
}

// OrderBy  spedifies how the resulting data should be sorted.
func (b *{{t.LcGoName}}Builder)  OrderBy(nodes... db.NodeI) *{{t.LcGoName}}Builder {
	b.base.OrderBy(nodes...)
	return b
}

// Limit willl return a subset of the data, limited to the offset and number of rows specified
func (b *{{t.LcGoName}}Builder)  Limit(maxRowCount int64, offset int64) *{{t.LcGoName}}Builder {
	b.base.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields. Once you put a Select in your query, you must
// specify all the fields that you will eventually read out. Be careful when selecting fields in joined tables, as joined
// tables will also contain pointers back to the parent table, and so the parent node should have the same field selected
// as the child node if you are querying those fields.
func (b *{{t.LcGoName}}Builder)  Select(nodes... db.NodeI) *{{t.LcGoName}}Builder {
	b.base.Select(nodes...)
	return b
}

// Alias lets you add a node with a custom name. After the query, you can read out the data using getAlias() on a
// returned object. Alias is useful for adding calculations or subqueries to the query.
func (b *{{t.LcGoName}}Builder)  Alias(name string, n db.NodeI) *{{t.LcGoName}}Builder {
	b.base.Alias(name, n)
	return b
}

// Distinct removes duplicates from the results of the query. Adding a Select() may help you get to the data you want, although
// using Distinct with joined tables is often not effective, since we force joined tables to include primary keys in the query, and this
// often ruins the effect of Distinct.
func (b *{{t.LcGoName}}Builder)  Distinct() *{{t.LcGoName}}Builder {
	b.base.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions in an Alias() call.
func (b *{{t.LcGoName}}Builder)  GroupBy(nodes... db.NodeI) *{{t.LcGoName}}Builder {
	b.base.GroupBy(nodes...)
	return b
}

func (b *{{t.LcGoName}}Builder)  Having(node db.NodeI)  *{{t.LcGoName}}Builder {
	 b.base.Having(node)
	 return b
}

// Count terminates a query and returns just the number of items selected.
func (b *{{t.LcGoName}}Builder)  Count(ctx context.Context, distinct bool, nodes... db.NodeI) uint {
	return b.base.Count(ctx, distinct, nodes...)
}

func (b *{{t.LcGoName}}Builder)  Delete(ctx context.Context) {
	 b.base.Delete(ctx)
}



}}

