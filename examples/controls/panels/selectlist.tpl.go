//** This file was code generated by got. DO NOT EDIT. ***

package panels

import (
	"bytes"
	"context"

	"github.com/goradd/goradd/pkg/page"
)

func (control *SelectListPanel) DrawTemplate(ctx context.Context, buf *bytes.Buffer) (err error) {

	buf.WriteString(`
<h1>Selection Lists</h1>
<p>
Selection lists let you select from a group of items. Below are the supported selection lists
that represent what is available through standard html controls. Many css/javascript frameworks use
these standard html widgets as the basis for their more elaborate selection mechanisms.
</p>
<p>
Selection lists all use the ItemList mixin, so you have a single kind of interface to add labels and
associated values to the list. Individual items can be styled as well.
</p>
<p>
These lists expect to have all of the items inserted and styled before being drawn. If you change items
after they are drawn, in response to a button click for example, then be sure to call Refresh() on the control
to redraw the list of items to select from.
All the items in a selection list are rendered. There is no mechanism for paging in or filtering items not shown.
Therefore, these selection lists are not good for selecting from a very large list of items.
</p>
<p>
Also see the types of columns available in the html table control which can serve as selections from a list.
In particular, tables are better at managing a very large list of items to select from, as the items in a
table are paged in, and can easily be filtered.
</p>
<h2>Single Selection Lists</h2>
<h3>SelectList</h3>
<p>
A SelectList is a typical dropdown list with a single selection. You can also set the size attribute
to display it as a scrolling list rather than a dropdown list.
</p>
`)

	buf.WriteString(`
`)

	{
		err := control.SingleSelect.With(page.NewLabelWrapper()).Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
`)

	buf.WriteString(`
`)

	{
		err := control.SingleSelectWithSize.With(page.NewLabelWrapper()).Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
<h3>RadioList</h2>
<p>
A radio list presents a list of radio buttons in a table format. The Value of the control is the value
of the item the user selects.
</p>
<p>
RadioLists can be scrolling lists if you wish. To see the scrolling effect, you have to somehow limit the
size of the control itself using CSS.
</p>

`)

	buf.WriteString(`
`)

	{
		err := control.RadioList1.With(page.NewLabelWrapper()).Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
`)

	buf.WriteString(`
`)

	{
		err := control.RadioList2.With(page.NewLabelWrapper()).Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
`)

	buf.WriteString(`
`)

	{
		err := control.RadioList3.With(page.NewLabelWrapper()).Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`

`)

	buf.WriteString(`
`)

	{
		err := control.SubmitAjax.Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
`)

	buf.WriteString(`
`)

	{
		err := control.SubmitServer.Draw(ctx, buf)
		if err != nil {
			return err
		}
	}

	buf.WriteString(`
`)

	buf.WriteString(`
`)

	return
}
