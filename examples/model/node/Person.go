package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type personNode struct {
	query.ReferenceNodeI
}

func Person() *personNode {
	n := personNode{
		query.NewTableNode("goradd", "person", "Person"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *personNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	return nodes
}
func (n *personNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *personNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *personNode) Copy_() query.NodeI {
	return &personNode{query.CopyNode(n.ReferenceNodeI)}
}

func (n *personNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *personNode) FirstName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"first_name",
		"FirstName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *personNode) LastName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"last_name",
		"LastName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *personNode) ProjectsAsTeamMember() *projectNode {
	cn := &projectNode{
		query.NewManyManyNode(
			"goradd",
			"team_member_project_assn",
			"team_member_id",
			"ProjectsAsTeamMember",
			"project",
			"project_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *personNode) PersonTypes() *personTypeNode {
	cn := &personTypeNode{
		query.NewManyManyNode(
			"goradd",
			"person_persontype_assn",
			"person_id",
			"PersonTypes",
			"person_type",
			"person_type_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *personNode) Login() *loginNode {

	cn := &loginNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"Login",
			"login",
			"person_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *personNode) ProjectsAsManager() *projectNode {

	cn := &projectNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"ProjectsAsManager",
			"project",
			"manager_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *personNode) Addresses() *addressNode {

	cn := &addressNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"Addresses",
			"address",
			"person_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}
