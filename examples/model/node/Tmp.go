package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type tmpNode struct {
	query.NodeI
}

func Tmp() *tmpNode {
	n := tmpNode{
		query.NewTableNode("goradd", "tmp", "Tmp"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *tmpNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.D())
	nodes = append(nodes, n.I())
	return nodes
}
func (n *tmpNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.D()
}
func (n *tmpNode) EmbeddedNode_() query.NodeI {
	return n.NodeI
}

func (n *tmpNode) D() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"tmp",
		"d",
		"D",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *tmpNode) I() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"tmp",
		"i",
		"I",
		query.ColTypeInteger,
	)
	query.SetParentNode(cn, n)
	return cn
}
