package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type loginNode struct {
	query.NodeI
}

func Login() *loginNode {
	n := loginNode{
		query.NewTableNode("goradd", "login", "Login"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *loginNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Username())
	nodes = append(nodes, n.Password())
	nodes = append(nodes, n.IsEnabled())
	return nodes
}
func (n *loginNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *loginNode) EmbeddedNode_() query.NodeI {
	return n.NodeI
}

func (n *loginNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"id",
		"ID",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *loginNode) PersonID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"person_id",
		"PersonID",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *loginNode) Person() *personNode {
	cn := &personNode{
		query.NewReferenceNode(
			"goradd",
			"login",
			"person_id",
			"PersonID",
			"Person",
			"person",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func (n *loginNode) Username() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"username",
		"Username",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *loginNode) Password() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"password",
		"Password",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *loginNode) IsEnabled() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"is_enabled",
		"IsEnabled",
		query.ColTypeBool,
	)
	query.SetParentNode(cn, n)
	return cn
}
