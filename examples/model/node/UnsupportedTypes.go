package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type unsupportedTypesNode struct {
	query.ReferenceNodeI
}

func UnsupportedTypes() *unsupportedTypesNode {
	n := unsupportedTypesNode{
		query.NewTableNode("goradd", "unsupported_types", "UnsupportedTypes"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *unsupportedTypesNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.TypeSet())
	nodes = append(nodes, n.TypeEnum())
	nodes = append(nodes, n.TypeDecimal())
	nodes = append(nodes, n.TypeDouble())
	nodes = append(nodes, n.TypeGeo())
	nodes = append(nodes, n.TypeTinyBlob())
	nodes = append(nodes, n.TypeMediumBlob())
	nodes = append(nodes, n.TypeVarbinary())
	nodes = append(nodes, n.TypeLongtext())
	nodes = append(nodes, n.TypeBinary())
	nodes = append(nodes, n.TypeSmall())
	nodes = append(nodes, n.TypeMedium())
	nodes = append(nodes, n.TypeBig())
	nodes = append(nodes, n.TypePolygon())
	nodes = append(nodes, n.TypeSerial())
	nodes = append(nodes, n.TypeUnsigned())
	nodes = append(nodes, n.TypeMultfk1())
	nodes = append(nodes, n.TypeMultifk2())
	return nodes
}
func (n *unsupportedTypesNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.TypeSerial()
}
func (n *unsupportedTypesNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *unsupportedTypesNode) Copy_() query.NodeI {
	return &unsupportedTypesNode{query.CopyNode(n.ReferenceNodeI)}
}

func (n *unsupportedTypesNode) TypeSet() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_set",
		"TypeSet",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeEnum() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_enum",
		"TypeEnum",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeDecimal() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_decimal",
		"TypeDecimal",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeDouble() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_double",
		"TypeDouble",
		query.ColTypeFloat,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeGeo() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_geo",
		"TypeGeo",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeTinyBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_tiny_blob",
		"TypeTinyBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeMediumBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_medium_blob",
		"TypeMediumBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeVarbinary() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_varbinary",
		"TypeVarbinary",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeLongtext() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_longtext",
		"TypeLongtext",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeBinary() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_binary",
		"TypeBinary",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeSmall() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_small",
		"TypeSmall",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeMedium() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_medium",
		"TypeMedium",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeBig() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_big",
		"TypeBig",
		query.ColTypeInteger64,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypePolygon() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_polygon",
		"TypePolygon",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeSerial() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_serial",
		"TypeSerial",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeUnsigned() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_unsigned",
		"TypeUnsigned",
		query.ColTypeUnsigned,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeMultfk1() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_multFk1",
		"TypeMultfk1",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *unsupportedTypesNode) TypeMultifk2() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"unsupported_types",
		"type_multiFk2",
		"TypeMultifk2",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}
