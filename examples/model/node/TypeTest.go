package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type typeTestNode struct {
	query.ReferenceNodeI
}

func TypeTest() *typeTestNode {
	n := typeTestNode{
		query.NewTableNode("goradd", "type_test", "TypeTest"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *typeTestNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.Ts())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestFloat())
	nodes = append(nodes, n.TestText())
	nodes = append(nodes, n.TestBit())
	nodes = append(nodes, n.TestVarchar())
	return nodes
}
func (n *typeTestNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *typeTestNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}
func (n *typeTestNode) Copy_() query.NodeI {
	return &typeTestNode{query.CopyNode(n.ReferenceNodeI)}
}

func (n *typeTestNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) Date() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"date",
		"Date",
		query.ColTypeDateTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) Time() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"time",
		"Time",
		query.ColTypeDateTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) DateTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"date_time",
		"DateTime",
		query.ColTypeDateTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) Ts() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"ts",
		"Ts",
		query.ColTypeDateTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) TestInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"test_int",
		"TestInt",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) TestFloat() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"test_float",
		"TestFloat",
		query.ColTypeFloat,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) TestText() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"test_text",
		"TestText",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) TestBit() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"test_bit",
		"TestBit",
		query.ColTypeBool,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *typeTestNode) TestVarchar() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"type_test",
		"test_varchar",
		"TestVarchar",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}
