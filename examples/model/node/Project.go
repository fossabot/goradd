package node

// Code generated by goradd. DO NOT EDIT.

import (
	"github.com/goradd/goradd/pkg/orm/query"
)

type projectNode struct {
	query.NodeI
}

func Project() *projectNode {
	n := projectNode{
		query.NewTableNode("goradd", "project", "Project"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

func (n *projectNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Num())
	nodes = append(nodes, n.ProjectStatusTypeID())
	nodes = append(nodes, n.ManagerID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.Description())
	nodes = append(nodes, n.StartDate())
	nodes = append(nodes, n.EndDate())
	nodes = append(nodes, n.Budget())
	nodes = append(nodes, n.Spent())
	return nodes
}
func (n *projectNode) PrimaryKeyNode_() *query.ColumnNode {
	return n.ID()
}
func (n *projectNode) EmbeddedNode_() query.NodeI {
	return n.NodeI
}

func (n *projectNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"id",
		"ID",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Num() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"num",
		"Num",
		query.ColTypeInteger,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) ProjectStatusTypeID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"project_status_type_id",
		"ProjectStatusTypeID",
		query.ColTypeUnsigned,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) ProjectStatusType() *projectStatusTypeNode {
	cn := &projectStatusTypeNode{
		query.NewReferenceNode(
			"goradd",
			"project",
			"project_status_type_id",
			"ProjectStatusTypeID",
			"ProjectStatusType",
			"project_status_type",
			"id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) ManagerID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"manager_id",
		"ManagerID",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Manager() *personNode {
	cn := &personNode{
		query.NewReferenceNode(
			"goradd",
			"project",
			"manager_id",
			"ManagerID",
			"Manager",
			"person",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"name",
		"Name",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Description() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"description",
		"Description",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) StartDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"start_date",
		"StartDate",
		query.ColTypeDateTime,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) EndDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"end_date",
		"EndDate",
		query.ColTypeDateTime,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Budget() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"budget",
		"Budget",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) Spent() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"spent",
		"Spent",
		query.ColTypeString,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *projectNode) TeamMembers() *personNode {
	cn := &personNode{
		query.NewManyManyNode(
			"goradd",
			"team_member_project_assn",
			"project_id",
			"TeamMembers",
			"person",
			"team_member_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *projectNode) ChildrenAsParent() *projectNode {
	cn := &projectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"parent_id",
			"ChildrenAsParent",
			"project",
			"child_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *projectNode) ParentsAsChild() *projectNode {
	cn := &projectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"child_id",
			"ParentsAsChild",
			"project",
			"parent_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func (n *projectNode) Milestones() *milestoneNode {

	cn := &milestoneNode{
		query.NewReverseReferenceNode(
			"goradd",
			"project",
			"id",
			"Milestones",
			"milestone",
			"project_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}
