// struct.tmpl
{{
// {{privateName}}Base is a base structure to be embedded in a "subclass" and provides the ORM access to the database.
// Do not directly access the internal variables, but rather use the accessor functions, since this class maintains internal state
// related to the variables.

type {{privateName}}Base struct {
}}

for _,col := range t.Columns {

{{
{{if col.IsId}}
	{{= col.ModelName }} string
{{else}}
	{{= col.ModelName }} {{= col.GoType.String() }}
{{if}}
{{if col.IsNullable}}
	{{= col.ModelName }}IsNull bool
{{if}}
	{{= col.ModelName }}IsValid bool
	{{= col.ModelName }}IsDirty bool
{{g if col.IsReference() && !col.ForeignKey.IsType {
		oName := dd.AssociatedObjectPrefix + col.ForeignKey.GoName
}}
	{{oName}} *{{= col.ForeignKey.GoType }}
{{g } }}

}}

} // for

if len(t.ReverseReferences) > 0 {
{{

// Reverse reference objects.
}}
} // if


for _,ref := range t.ReverseReferences {
	if ref.IsUnique {
{{
	{{dd.AssociatedObjectPrefix}}{{= ref.GoName }} *{{= ref.GoType }}
}}
	} else {
{{
	{{dd.AssociatedObjectPrefix}}{{= ref.GoPlural }} []*{{= ref.GoType }} // Objects in the order they were queried
	m{{= ref.GoPlural }} map[string] *{{= ref.GoType }}					  // Objects by PK
}}
	}
}

if len(t.ManyManyReferences) > 0 {
{{

// Many-Many reference objects.
}}
} // if


for _,ref := range t.ManyManyReferences {
{{
	{{dd.AssociatedObjectPrefix}}{{ref.GoPlural}} []{{if !ref.IsTypeAssociation }}*{{if}}{{ref.AssociatedObjectName}}
{{if !ref.IsTypeAssociation }}
	m{{= ref.GoPlural }} map[string] *{{ref.AssociatedObjectName}}					  // Objects by PK
{{if}}
}}
} // for

{{

	// Custom aliases, if specified
	_aliases map[string]interface{}

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update
	_restored bool
}}

{{ }

}}


