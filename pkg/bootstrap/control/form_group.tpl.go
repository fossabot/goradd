//** This file was code generated by got. ***

package control

import (
	"bytes"
	"context"
	"html"

	grhtml "github.com/spekary/goradd/pkg/html"
	"github.com/spekary/goradd/pkg/page"
)

// The FormGroupTmpl function is a wrapper template that draws form objects using bootstrap styling.
// To use it, call the .With() function on your control and pass it the result of the NewFormGroupTmpl() function
func FormGroupTmpl(ctx context.Context, wrapper *DivWrapperType, ctrl page.ControlI, h string, buf *bytes.Buffer) {
	var hasInnerDivAttributes bool = wrapper.HasInnerDivAttributes()
	var hasInstructions bool = (ctrl.Instructions() != "")

	if wrapper.UseTooltips {
		// bootstrap requires that parent of a tooltipped object has position relative
		ctrl.WrapperAttributes().SetStyle("position", "relative")
	}

	buf.WriteString(`<div id="`)

	buf.WriteString(ctrl.ID())

	buf.WriteString(`_ctl" `)

	buf.WriteString(ctrl.WrapperAttributes().String())

	buf.WriteString(` >
`)
	if ctrl.Label() != "" {
		buf.WriteString(`    `)
		if ctrl.TextIsLabel() {
			buf.WriteString(`   <div id="`)

			buf.WriteString(ctrl.ID())

			buf.WriteString(`_lbl" `)
			if wrapper.HasLabelAttributes() {
				buf.WriteString(wrapper.LabelAttributes().String())
			}

			buf.WriteString(`>`)

			buf.WriteString(html.EscapeString(ctrl.Label()))

			buf.WriteString(`</div>
    `)
		} else {

			buf.WriteString(`  <label id="`)

			buf.WriteString(ctrl.ID())

			buf.WriteString(`_lbl" `)
			if ctrl.HasFor() {
				buf.WriteString(` for="`)

				buf.WriteString(ctrl.ID())

				buf.WriteString(`"`)
			}

			buf.WriteString(` `)
			if wrapper.HasLabelAttributes() {
				buf.WriteString(wrapper.LabelAttributes().String())
			}

			buf.WriteString(`>`)

			buf.WriteString(html.EscapeString(ctrl.Label()))

			buf.WriteString(`</label>
    `)
		}
	} else {

		buf.WriteString(`    `)
		if ctrl.HasAttribute("placeholder") {
			buf.WriteString(`  <label id="`)

			buf.WriteString(ctrl.ID())

			buf.WriteString(`_lbl" `)
			if ctrl.HasFor() {
				buf.WriteString(` for="`)

				buf.WriteString(ctrl.ID())

				buf.WriteString(`"`)
			}

			buf.WriteString(` class="sr-only">`)

			buf.WriteString(html.EscapeString(ctrl.Attribute("placeholder")))

			buf.WriteString(`</label>
    `)
		}
	}

	buf.WriteString(`
`)
	if hasInnerDivAttributes {
		buf.WriteString(`<div `)

		buf.WriteString(wrapper.InnerDivAttributes().String())

		buf.WriteString(`>`)
	}

	buf.WriteString(grhtml.Indent(h))

	buf.WriteString(`
`)
	if hasInnerDivAttributes {
		buf.WriteString(`</div>`)
	}

	buf.WriteString(`
`)
	msg := ctrl.ValidationMessage()
	var class string

	switch ctrl.ValidationState() {
	case page.ValidationWaiting:
		fallthrough // we need to correctly style
	case page.ValidationValid:
		if msg == "" {
			msg = "&nbsp;"
		} else {
			msg = html.EscapeString(msg)
		}
		if wrapper.UseTooltips {
			class = "valid-tooltip"
		} else {
			class = "valid-feedback"
		}

	case page.ValidationInvalid:
		if msg == "" {
			msg = "&nbsp;"
		} else {
			msg = html.EscapeString(msg)
		}
		if wrapper.UseTooltips {
			class = "invalid-tooltip"
		} else {
			class = "invalid-feedback"
		}
	}
	if hasInstructions {

		buf.WriteString(`<small id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_inst" class="form-text" >`)

		buf.WriteString(html.EscapeString(ctrl.Instructions()))

		buf.WriteString(`</small>`)

	}
	if ctrl.ValidationState() != page.ValidationNever {

		buf.WriteString(`<div id="`)

		buf.WriteString(ctrl.ID())

		buf.WriteString(`_err" class="`)

		buf.WriteString(class)

		buf.WriteString(`">`)

		buf.WriteString(msg)

		buf.WriteString(`</div>`)

	}

	buf.WriteString(`</div>
`)

	return

}
