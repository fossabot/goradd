package control

import (
	"context"
	"bytes"
	grhtml "github.com/goradd/goradd/html"
	"github.com/goradd/goradd/pkg/page"
	"html"
)

// The FormGroupTmpl function is a wrapper template that draws form objects using bootstrap styling.
// To use it, call the .With() function on your control and pass it the result of the NewFormGroupTmpl() function
func FormGroupTmpl(ctx context.Context, wrapper *DivWrapperType, ctrl page.ControlI, h string, buf *bytes.Buffer) {
    var hasInnerDivAttributes bool = wrapper.HasInnerDivAttributes()
    var hasInstructions bool = (ctrl.Instructions()!= "")

    if wrapper.useTooltips {
        // bootstrap requires that parent of a tooltipped object has position relative
        ctrl.WrapperAttributes().SetStyle("position", "relative")
    }
{{
<div id="{{= ctrl.ID() }}_ctl" {{= ctrl.WrapperAttributes().String() }} >
{{if ctrl.Label() != "" }}
    {{if ctrl.TextIsLabel() }}
   <div id="{{= ctrl.ID() }}_lbl" {{if wrapper.HasLabelAttributes() }}{{= wrapper.LabelAttributes().String() }}{{if}}>{{!= ctrl.Label() }}</div>
    {{else}}
  <label id="{{= ctrl.ID() }}_lbl" {{if ctrl.HasFor() }} for="{{= ctrl.ID() }}"{{if}} {{if wrapper.HasLabelAttributes() }}{{= wrapper.LabelAttributes().String() }}{{if}}>{{!= ctrl.Label() }}</label>
    {{if}}
{{else}}
    {{if ctrl.HasAttribute("placeholder")}}
  <label id="{{= ctrl.ID() }}_lbl" {{if ctrl.HasFor() }} for="{{= ctrl.ID() }}"{{if}} class="sr-only">{{!= ctrl.Attribute("placeholder") }}</label>
    {{if}}
{{if}}

{{if hasInnerDivAttributes }}<div {{= wrapper.InnerDivAttributes().String() }}>{{if}}
{{= grhtml.Indent(h) }}
{{if hasInnerDivAttributes }}</div>{{if}}

{{g
    msg := ctrl.ValidationMessage()
    var class string

    switch ctrl.ValidationState() {
    case page.ValidationWaiting: fallthrough // we need to correctly style
    case page.ValidationValid:
        if msg == "" {
            msg = "&nbsp;";
        } else {
            msg = html.EscapeString(msg)
        }
        if wrapper.useTooltips {
            class = "valid-tooltip"
        } else {
            class = "valid-feedback"
        }

    case page.ValidationInvalid:
         if msg == "" {
             msg = "&nbsp;";
         } else {
            msg = html.EscapeString(msg)
         }
         if wrapper.useTooltips {
             class = "invalid-tooltip"
         } else {
             class = "invalid-feedback"
         }
    }
    if hasInstructions {
        {{ <small id="{{= ctrl.ID() }}_inst" class="form-text" >{{!= ctrl.Instructions() }}</small> }}
    }
    if ctrl.ValidationState() != page.ValidationNever {
        {{ <div id="{{= ctrl.ID() }}_err" class="{{= class }}">{{= msg }}</div> }}
    }
}}
</div>
}}

    return

}
